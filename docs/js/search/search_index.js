var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.559,1,2.33]],["body/controllers/AppController.html",[0,2.422,1,3.621,2,1.906,3,0.353,4,0.353,5,0.278,6,3.591,7,0.393,8,1.269,9,5.279,10,5.279,11,2.601,12,0.025,13,5.383,14,0.969,15,4.236,16,1.188,17,1.044,18,4.236,19,1.039,20,1.065,21,3.332,22,3.591,23,0.353,24,0.014,25,3.167,26,2.047,27,1.353,28,4.236,29,4.236,30,0.019,31,0.019]],["title/modules/AppModule.html",[32,1.362,33,2.33]],["body/modules/AppModule.html",[1,3.642,2,2.15,3,0.295,4,0.295,5,0.232,12,0.025,19,1.271,20,0.888,21,3.517,22,2.994,23,0.295,24,0.012,30,0.017,31,0.017,32,1.878,33,4.607,34,1.706,35,2.15,36,2.994,37,2.994,38,2.994,39,3.828,40,3.251,41,3.251,42,3.828,43,2.69,44,1.988,45,1.589,46,3.531,47,2.928,48,3.213,49,2.375,50,1.484,51,3.531,52,3.531,53,2.928,54,3.531,55,3.531,56,3.531,57,3.531]],["title/injectables/AppService.html",[21,1.951,58,1.054]],["body/injectables/AppService.html",[3,0.374,4,0.374,5,0.294,7,0.415,8,1.314,9,5.386,10,5.386,12,0.024,14,1.004,16,1.231,17,1.065,19,0.865,20,1.126,21,3.14,23,0.374,24,0.015,27,1.402,30,0.019,31,0.019,58,1.696,59,2.164,60,3.798,61,4.48,62,4.48,63,4.48,64,4.48,65,4.48]],["title/controllers/AuthController.html",[0,1.559,66,2.33]],["body/controllers/AuthController.html",[0,1.659,2,1.659,3,0.308,4,0.308,5,0.242,7,0.342,8,1.159,11,1.781,12,0.025,14,0.664,16,0.814,19,1.266,20,0.927,23,0.308,24,0.013,25,2.757,26,1.781,27,0.927,30,0.017,31,0.017,66,3.308,67,3.126,68,2.88,69,3.677,70,3.126,71,3.877,72,4.692,73,3.688,74,0.927,75,0.712,76,0.452,77,0.869,78,2.56,79,3.116,80,3.688,81,2.757,82,2.757,83,2.076,84,3.126,85,2.26,86,2.757,87,2.26,88,2.757,89,2.757,90,3.688,91,1.273,92,2.076,93,3.688,94,3.688,95,3.688,96,1.358,97,4.17,98,3.688,99,1.358,100,2.757,101,3.688,102,2.076,103,3.688]],["title/modules/AuthModule.html",[32,1.362,39,2.123]],["body/modules/AuthModule.html",[2,2.086,3,0.282,4,0.282,5,0.222,12,0.025,19,1.274,20,0.849,23,0.282,24,0.012,30,0.016,31,0.016,32,1.822,34,1.632,35,2.086,39,4.229,41,3.208,43,2.61,44,1.902,45,1.52,47,2.841,48,3.118,49,2.272,50,1.419,53,2.07,66,3.559,75,0.652,79,3.471,104,2.864,105,3.378,106,2.864,107,2.864,108,3.778,109,3.378,110,3.118,111,3.378,112,2.272,113,3.378,114,3.378,115,3.378,116,2.525,117,2.864,118,1.328,119,2.841,120,2.525,121,3.465,122,3.378,123,2.864,124,2.525,125,2.525,126,1.902,127,3.378,128,3.378,129,3.378,130,3.378,131,2.864]],["title/injectables/AuthService.html",[58,1.054,79,1.951]],["body/injectables/AuthService.html",[3,0.211,4,0.211,5,0.166,7,0.235,8,0.888,12,0.025,14,0.811,16,0.832,17,0.755,19,1.213,20,0.636,23,0.211,24,0.009,26,1.222,27,0.947,30,0.013,31,0.013,50,1.063,58,1.146,59,1.222,68,2.911,69,2.816,70,3.194,71,3.269,74,1.132,75,0.869,76,0.552,77,1.061,78,2.596,79,2.121,84,2.144,92,1.424,96,1.658,99,1.387,102,3.004,116,1.891,118,2.392,120,1.891,132,2.144,133,3.768,134,1.301,135,2.144,136,3.729,137,5.794,138,2.607,139,2.529,140,3.194,141,3.768,142,2.809,143,2.529,144,2.529,145,1.701,146,1.55,147,2.816,148,1.424,149,1.891,150,2.121,151,2.144,152,1.891,153,0.994,154,2.144,155,2.535,156,3.768,157,2.529,158,2.529,159,1.222,160,2.121,161,2.529,162,2.529,163,2.529,164,2.529,165,2.144,166,1.891,167,1.77,168,2.529,169,2.529,170,2.529,171,2.529,172,2.529,173,2.144,174,2.144,175,1.55,176,1.77,177,2.144,178,2.343,179,3.194,180,1.55,181,1.424,182,1.701,183,2.144,184,2.144,185,1.82,186,2.144,187,1.481,188,2.144,189,1.891,190,3.768,191,2.144,192,2.529,193,2.529,194,2.529,195,2.529,196,2.529,197,2.529]],["title/classes/Authorization.html",[24,0.012,198,2.59]],["body/classes/Authorization.html",[3,0.33,4,0.33,5,0.259,7,0.366,8,1.213,12,0.025,14,0.711,16,0.872,17,0.96,19,1.105,23,0.33,24,0.013,30,0.018,31,0.018,74,0.993,75,0.762,76,0.484,77,0.931,96,2.107,99,1.454,145,2.657,146,2.42,150,3.415,159,1.908,160,2.224,181,2.897,187,2.023,198,3.847,199,1.201,200,3.348,201,5.724,202,5.146,203,5.146,204,6.065,205,3.95,206,3.348,207,3.348,208,1.895,209,1.777,210,3.348,211,3.95,212,3.95,213,3.95,214,5.146,215,3.95]],["title/classes/BaseError.html",[24,0.012,216,1.559]],["body/classes/BaseError.html",[3,0.223,4,0.223,5,0.175,7,0.248,8,0.925,12,0.025,14,0.923,16,0.59,17,0.859,23,0.492,24,0.02,27,0.672,30,0.014,31,0.014,74,0.672,75,1.054,76,0.57,77,0.63,91,1.355,134,1.355,153,1.543,199,0.813,208,1.445,209,2.093,216,2.723,217,1.292,218,2.378,219,2.85,220,1.052,221,3.149,222,2.85,223,2.668,224,2.674,225,2.983,226,2.897,227,3.926,228,2.674,229,2.674,230,1.292,231,2.093,232,2.421,233,1.392,234,1.392,235,1.392,236,2.043,237,2.043,238,1.392,239,2.043,240,1.649,241,2.97,242,2.043,243,2.97,244,1.392,245,1.292,246,1.392,247,1.392,248,1.292,249,1.392,250,1.392,251,1.123,252,1.292,253,1.392,254,1.766,255,1.392,256,1.392,257,1.392]],["title/injectables/CaslAbilityFactory.html",[58,1.054,258,1.803]],["body/injectables/CaslAbilityFactory.html",[3,0.288,4,0.288,5,0.226,7,0.32,8,1.108,12,0.025,14,0.621,16,0.761,19,1.197,20,0.867,23,0.392,24,0.012,27,0.867,30,0.016,31,0.016,58,1.429,59,1.666,74,0.867,75,0.665,76,0.704,77,0.813,96,1.269,99,1.269,118,2.438,145,2.319,146,2.113,176,1.355,187,1.355,199,1.048,210,2.923,248,2.271,258,2.446,259,2.881,260,2.577,261,4.701,262,4.701,263,3.448,264,3.597,265,4.701,266,4.701,267,4.701,268,3.985,269,2.923,270,2.319,271,2.577,272,3.448,273,3.448,274,2.923,275,2.923,276,4.701,277,3.448,278,3.448,279,3.448,280,4.534,281,3.448,282,4.701,283,3.448,284,3.448,285,2.577,286,3.448,287,3.448,288,3.448,289,3.448,290,3.448,291,3.448,292,3.448]],["title/modules/CaslModule.html",[32,1.362,40,1.803]],["body/modules/CaslModule.html",[3,0.367,4,0.367,5,0.289,12,0.024,19,1.064,20,1.105,23,0.367,24,0.015,30,0.019,31,0.019,32,2.166,34,2.124,35,2.479,40,3.502,43,3.103,44,2.475,45,1.978,47,3.377,110,3.706,258,3.636,293,3.727,294,3.727,295,3.727,296,4.396,297,4.396,298,3.286]],["title/classes/HttpExceptionFilter.html",[24,0.012,299,2.59]],["body/classes/HttpExceptionFilter.html",[3,0.259,4,0.259,5,0.204,7,0.288,8,1.031,12,0.025,14,0.788,16,0.966,19,0.977,20,0.781,23,0.259,24,0.011,30,0.015,31,0.015,74,1.1,75,0.977,76,0.536,77,1.031,96,2.272,99,1.144,145,2.091,146,1.905,155,2.85,189,4.328,199,0.945,207,3.709,209,1.399,219,2.113,222,2.113,226,2.278,251,1.838,252,1.502,299,3.27,300,4.292,301,2.635,302,4.375,303,5.062,304,5.494,305,4.375,306,4.375,307,5.494,308,4.292,309,5.494,310,3.108,311,3.108,312,4.375,313,3.108,314,3.108,315,2.635,316,4.375,317,2.635,318,3.108,319,3.108,320,3.108,321,3.108,322,3.108,323,3.108,324,3.108,325,3.108,326,3.108,327,3.108,328,3.108,329,3.108,330,3.108,331,3.108,332,3.108,333,3.108,334,3.108,335,4.375,336,4.375,337,4.375,338,3.108,339,3.108,340,3.108,341,2.091,342,3.108,343,3.108,344,3.108,345,3.108,346,3.108]],["title/interfaces/IConfig.html",[347,1.803,348,2.33]],["body/interfaces/IConfig.html",[3,0.36,4,0.36,5,0.283,7,0.4,12,0.024,17,1.168,23,0.36,30,0.019,31,0.019,76,0.792,220,1.459,225,2.883,308,5.314,347,2.245,348,3.663,349,2.902,350,3.658,351,5.314,352,5.314,353,6.268,354,6.268]],["title/interfaces/JWTPayload.html",[150,1.951,347,1.803]],["body/interfaces/JWTPayload.html",[3,0.36,4,0.36,5,0.283,7,0.4,12,0.024,17,1.182,23,0.36,30,0.019,31,0.019,76,0.792,150,3.066,167,2.464,178,3.262,185,3.028,187,2.464,191,5.314,220,1.459,347,2.245,349,2.902,355,3.658]],["title/injectables/JwtAuthGuard.html",[58,1.054,356,2.123]],["body/injectables/JwtAuthGuard.html",[3,0.413,4,0.413,5,0.325,12,0.024,19,1.145,20,1.246,23,0.413,24,0.017,30,0.021,31,0.021,58,1.803,59,2.394,112,3.333,218,1.948,356,3.634,357,3.704,358,4.201,359,4.956,360,4.956]],["title/injectables/JwtStrategy.html",[58,1.054,108,2.123]],["body/injectables/JwtStrategy.html",[3,0.276,4,0.276,5,0.217,7,0.307,8,1.077,12,0.025,14,0.823,16,0.731,19,1.183,20,0.832,23,0.276,24,0.011,25,2.475,27,0.832,30,0.016,31,0.016,53,2.029,58,1.39,59,1.6,68,2.725,74,1.149,75,0.882,76,0.56,77,1.077,78,2.379,92,1.864,96,1.219,99,1.928,102,1.864,108,2.802,112,2.227,117,2.807,121,2.475,131,2.807,134,1.143,138,2.757,152,2.475,153,1.301,159,2.53,160,2.948,173,4.439,174,2.807,175,2.029,176,2.219,177,2.807,180,2.029,182,2.227,189,3.417,218,1.301,357,3.914,361,2.807,362,4.572,363,3.311,364,3.311,365,4.572,366,5.236,367,3.311,368,3.311,369,3.311,370,2.807,371,3.311,372,3.311,373,3.311,374,3.311,375,3.311,376,3.311,377,3.311,378,2.475,379,3.311,380,2.807,381,3.311,382,3.311]],["title/classes/LoginDto.html",[24,0.012,71,2.123]],["body/classes/LoginDto.html",[3,0.371,4,0.371,5,0.292,7,0.412,11,2.681,12,0.024,14,0.999,17,1.062,19,0.858,23,0.371,24,0.015,26,3.213,30,0.019,31,0.019,71,3.401,76,0.68,83,2.503,142,3.407,167,2.378,199,1.352,220,1.487,383,3.769,384,5.529,385,4.446,386,4.446]],["title/classes/MethodNotImplementedError.html",[24,0.012,254,1.559]],["body/classes/MethodNotImplementedError.html",[3,0.226,4,0.226,5,0.178,7,0.251,8,0.935,12,0.025,14,0.929,16,0.599,17,0.665,23,0.494,24,0.02,27,0.681,30,0.014,31,0.014,74,0.681,75,0.905,76,0.575,77,0.639,91,1.369,134,1.369,153,1.559,199,0.824,208,1.46,209,2.11,216,2.872,217,1.31,218,2.387,219,2.771,220,1.062,221,3.083,222,2.652,223,2.685,225,2.652,226,2.872,230,1.31,231,2.11,232,2.44,233,1.411,234,1.411,235,1.411,236,2.064,237,2.064,238,1.411,239,2.064,240,1.666,241,3.083,242,2.064,243,2.985,244,1.411,245,1.31,246,1.411,247,1.411,248,1.31,249,1.411,250,1.411,251,1.139,252,1.31,253,1.411,254,2.11,255,1.411,256,1.411,257,1.411,387,2.711,388,2.64,389,1.527,390,1.527,391,1.527]],["title/classes/NotFoundError.html",[24,0.012,240,1.456]],["body/classes/NotFoundError.html",[3,0.226,4,0.226,5,0.178,7,0.251,8,0.935,12,0.025,14,0.929,16,0.599,17,0.665,23,0.494,24,0.02,27,0.681,30,0.014,31,0.014,74,0.681,75,0.905,76,0.575,77,0.639,91,1.369,134,1.369,153,1.559,199,0.824,208,1.46,209,2.11,216,2.872,217,1.31,218,2.387,219,2.771,220,1.062,221,3.083,222,2.652,223,2.685,225,2.652,226,2.872,230,1.31,231,2.11,232,2.44,233,1.411,234,1.411,235,1.411,236,2.064,237,2.064,238,1.411,239,2.064,240,1.97,241,3.083,242,2.064,243,2.985,244,1.411,245,1.31,246,1.411,247,1.411,248,1.31,249,1.411,250,1.411,251,1.139,252,1.31,253,1.411,254,1.784,255,1.411,256,1.411,257,1.411,388,2.64,389,1.527,390,1.527,391,1.527,392,2.711]],["title/classes/Session.html",[24,0.012,176,1.362]],["body/classes/Session.html",[3,0.266,4,0.266,5,0.209,7,0.295,11,2.924,12,0.025,14,1.09,17,1.062,19,0.99,23,0.371,24,0.011,30,0.016,31,0.016,50,1.338,76,0.789,96,1.172,118,1.252,120,2.381,125,2.381,126,2.505,148,1.793,159,2.15,167,2.016,175,3.143,176,1.749,178,2.89,180,3.143,181,3.289,185,2.478,187,2.016,199,0.968,218,1.749,220,1.192,393,2.381,394,4.348,395,4.151,396,4.348,397,4.707,398,3.735,399,3.185,400,5.53,401,3.185,402,3.185,403,3.185,404,4.45,405,2.993,406,3.185,407,3.185,408,2.7,409,2.7,410,2.7,411,3.185,412,3.772,413,2.142,414,2.7,415,3.185,416,2.7]],["title/controllers/SessionController.html",[0,1.559,417,2.33]],["body/controllers/SessionController.html",[0,1.414,2,1.414,3,0.262,4,0.262,5,0.206,7,0.291,8,1.039,11,1.518,12,0.025,14,0.566,16,0.694,17,0.527,19,1.255,20,0.79,23,0.262,24,0.011,26,1.518,27,0.79,30,0.015,31,0.015,68,2.65,74,0.79,75,0.606,76,0.624,77,0.74,78,2.294,81,4.345,82,2.348,83,1.769,85,1.925,86,2.348,87,1.925,88,2.348,91,1.085,92,1.769,96,1.157,99,1.623,100,2.348,102,1.769,126,1.769,134,1.085,138,2.291,155,2.482,160,1.769,167,2.001,176,1.732,208,1.623,251,1.852,258,2.65,259,1.925,264,2.113,270,2.113,271,2.348,298,2.348,356,1.925,405,2.113,417,2.965,418,2.664,419,4.317,420,3.142,421,4.408,422,3.142,423,3.142,424,3.142,425,3.737,426,2.664,427,2.664,428,3.737,429,4.408,430,2.664,431,2.664,432,2.664,433,2.348,434,3.142,435,3.142,436,3.142,437,3.142,438,2.664,439,3.142,440,3.142,441,3.142,442,2.664,443,2.664,444,3.142]],["title/modules/SessionModule.html",[32,1.362,41,1.803]],["body/modules/SessionModule.html",[2,2.251,3,0.316,4,0.316,5,0.248,12,0.025,19,1.23,20,0.951,23,0.316,24,0.013,30,0.017,31,0.017,32,1.966,34,1.828,35,2.251,40,3.316,41,3.475,43,2.817,44,2.13,45,1.702,47,3.066,48,3.365,49,2.545,50,1.589,75,0.73,110,3.365,124,2.828,126,2.13,138,3.078,176,1.487,413,3.365,417,3.77,430,3.207,433,2.828,445,3.207,446,3.783,447,3.207,448,3.207,449,3.783,450,3.207,451,3.783,452,3.783]],["title/interfaces/SessionPayload.html",[347,1.803,453,2.33]],["body/interfaces/SessionPayload.html",[3,0.343,4,0.343,5,0.27,7,0.382,12,0.024,17,1.161,23,0.343,30,0.018,31,0.018,76,0.799,77,1.452,167,2.421,175,3.775,178,3.206,180,3.775,185,2.976,187,2.421,220,1.416,347,2.142,349,2.769,395,4.874,453,3.555,454,3.49]],["title/injectables/SessionService.html",[58,1.054,138,1.559]],["body/injectables/SessionService.html",[3,0.222,4,0.222,5,0.174,7,0.246,8,0.921,12,0.025,14,0.98,16,1.128,17,0.954,19,1.136,20,0.667,23,0.222,24,0.009,27,1.284,30,0.014,31,0.014,50,1.116,58,1.188,59,1.283,68,3.346,74,1.368,75,1.051,76,0.667,77,1.283,78,2.963,96,0.978,99,1.438,134,1.349,136,3.819,138,1.758,148,2.609,149,1.985,155,1.495,159,1.283,166,2.92,167,1.535,176,1.821,178,2.033,180,2.394,181,1.495,182,3.662,398,1.786,419,3.312,433,1.985,453,3.437,455,2.251,456,2.84,457,3.906,458,2.656,459,2.656,460,3.906,461,2.656,462,5.12,463,5.694,464,2.656,465,1.985,466,3.906,467,3.906,468,2.656,469,2.656,470,3.312,471,3.819,472,2.656,473,2.251,474,3.906,475,2.656,476,2.656,477,2.656,478,2.656,479,2.656,480,2.656,481,2.656,482,2.656,483,2.656,484,2.656,485,2.251,486,2.656,487,2.656]],["title/classes/UnauthenticatedError.html",[24,0.012,153,1.362]],["body/classes/UnauthenticatedError.html",[3,0.226,4,0.226,5,0.178,7,0.251,8,0.935,12,0.025,14,0.929,16,0.599,17,0.665,23,0.494,24,0.02,27,0.681,30,0.014,31,0.014,74,0.681,75,0.905,76,0.575,77,0.639,91,1.369,134,1.369,153,1.843,199,0.824,208,1.46,209,2.11,216,2.872,217,1.31,218,2.387,219,2.771,220,1.062,221,3.083,222,2.652,223,2.685,225,2.652,226,2.872,230,1.31,231,2.11,232,2.44,233,1.411,234,1.411,235,1.411,236,2.064,237,2.064,238,1.411,239,2.064,240,1.666,241,3.083,242,2.064,243,2.985,244,1.411,245,1.31,246,1.411,247,1.411,248,1.31,249,1.411,250,1.411,251,1.139,252,1.31,253,1.411,254,1.784,255,1.411,256,1.411,257,1.411,388,2.64,389,1.527,390,1.527,391,1.527,488,2.711]],["title/classes/UnauthorizedError.html",[24,0.012,208,1.276]],["body/classes/UnauthorizedError.html",[3,0.226,4,0.226,5,0.178,7,0.251,8,0.935,12,0.025,14,0.929,16,0.599,17,0.665,23,0.494,24,0.02,27,0.681,30,0.014,31,0.014,74,0.681,75,0.905,76,0.575,77,0.639,91,1.369,134,1.369,153,1.559,199,0.824,208,1.726,209,2.11,216,2.872,217,1.31,218,2.387,219,2.771,220,1.062,221,3.083,222,2.652,223,2.685,225,2.652,226,2.872,230,1.31,231,2.11,232,2.44,233,1.411,234,1.411,235,1.411,236,2.064,237,2.064,238,1.411,239,2.064,240,1.666,241,3.083,242,2.064,243,2.985,244,1.411,245,1.31,246,1.411,247,1.411,248,1.31,249,1.411,250,1.411,251,1.139,252,1.31,253,1.411,254,1.784,255,1.411,256,1.411,257,1.411,388,2.64,389,1.527,390,1.527,391,1.527,489,2.711]],["title/classes/UnexpectedError.html",[24,0.012,231,1.559]],["body/classes/UnexpectedError.html",[3,0.226,4,0.226,5,0.178,7,0.251,8,0.935,12,0.025,14,0.929,16,0.599,17,0.665,23,0.494,24,0.02,27,0.681,30,0.014,31,0.014,74,0.681,75,0.905,76,0.575,77,0.639,91,1.369,134,1.369,153,1.559,199,0.824,208,1.46,209,2.11,216,2.872,217,1.31,218,2.387,219,2.771,220,1.062,221,3.083,222,2.652,223,2.685,225,2.652,226,2.872,230,1.31,231,2.322,232,2.44,233,1.411,234,1.411,235,1.411,236,2.064,237,2.064,238,1.411,239,2.064,240,1.666,241,3.083,242,2.064,243,2.985,244,1.411,245,1.31,246,1.411,247,1.411,248,1.31,249,1.411,250,1.411,251,1.139,252,1.31,253,1.411,254,1.784,255,1.411,256,1.411,257,1.411,388,2.64,389,1.527,390,1.527,391,1.527,490,2.711]],["title/classes/User.html",[24,0.012,118,1.362]],["body/classes/User.html",[3,0.278,4,0.278,5,0.219,7,0.309,11,2.868,12,0.025,14,1.069,17,1.074,19,0.886,23,0.383,24,0.011,27,0.837,30,0.016,31,0.016,50,1.399,76,0.752,96,1.69,118,1.804,119,2.041,126,2.584,142,2.957,148,1.875,159,2.217,167,2.225,175,3.219,181,3.343,185,2.537,187,2.064,199,1.013,218,1.804,220,1.23,394,4.453,395,3.431,396,2.823,397,2.823,398,3.087,400,5.432,408,2.823,409,2.823,410,2.823,412,2.823,416,2.823,491,2.489,492,3.33,493,3.33,494,3.33,495,3.33,496,3.33,497,3.33,498,3.33,499,3.33,500,3.33,501,2.823,502,3.33,503,2.823,504,4.59,505,3.33,506,2.24,507,3.33,508,3.33]],["title/controllers/UsersController.html",[0,1.559,509,2.33]],["body/controllers/UsersController.html",[0,1.035,2,1.035,3,0.192,4,0.192,5,0.151,7,0.213,8,0.826,11,2.297,12,0.025,14,0.856,16,1.05,17,0.904,19,1.218,20,0.578,23,0.192,24,0.008,26,1.111,27,1.195,30,0.012,31,0.012,45,1.578,68,3.244,72,3.604,74,1.195,75,0.918,76,0.583,77,1.121,78,3.01,81,1.719,82,1.719,83,1.295,85,1.409,86,1.719,87,1.409,88,1.719,91,0.794,92,1.295,96,1.885,97,2.973,99,1.751,100,1.719,102,2.677,118,1.869,134,0.794,148,1.295,155,1.975,160,2.677,178,2.92,208,1.751,251,0.966,258,2.212,259,1.409,264,2.859,270,1.547,271,1.719,298,1.719,315,1.95,356,1.409,378,1.719,425,4.574,426,1.95,427,1.95,428,4.031,431,1.95,432,1.95,438,3.604,442,3.604,443,1.95,456,2.149,471,2.622,506,2.859,509,2.359,510,1.95,511,2.973,512,1.95,513,2.914,514,2.3,515,2.973,516,2.3,517,2.3,518,2.3,519,2.3,520,2.3,521,2.3,522,2.3,523,2.3,524,2.3,525,2.3,526,2.3,527,1.95,528,1.719,529,1.975,530,1.95,531,1.719,532,2.3,533,2.3,534,2.3,535,2.3,536,2.3,537,2.3,538,2.3,539,2.3,540,2.3,541,2.3,542,2.3,543,2.3,544,2.3,545,3.507,546,2.3,547,2.3,548,2.3,549,2.3,550,2.3,551,2.3,552,2.3,553,2.3]],["title/classes/UsersDto.html",[24,0.012,513,2.123]],["body/classes/UsersDto.html",[3,0.326,4,0.326,5,0.257,7,0.363,11,2.918,12,0.024,14,1.088,17,1.114,19,0.755,23,0.326,24,0.013,26,3.321,30,0.018,31,0.018,76,0.74,83,2.201,142,3.207,159,2.47,167,2.239,185,2.752,187,2.239,199,1.189,220,1.37,384,5.633,405,2.63,513,3.133,554,3.315,555,3.91,556,3.91,557,3.91,558,3.91,559,3.91]],["title/modules/UsersModule.html",[32,1.362,42,2.123]],["body/modules/UsersModule.html",[2,2.19,3,0.303,4,0.303,5,0.238,12,0.025,19,1.242,20,0.912,23,0.303,24,0.012,30,0.017,31,0.017,32,1.913,34,1.754,35,2.19,40,3.277,41,3.277,42,4.136,43,2.74,44,2.044,45,1.633,47,2.983,48,3.274,49,2.442,50,1.525,75,0.701,110,3.274,118,1.427,119,2.983,123,3.078,124,2.714,125,2.714,126,2.044,450,3.078,509,3.693,528,2.714,529,3.827,530,3.078,560,3.078,561,3.078,562,3.078,563,3.63,564,3.63,565,3.63]],["title/injectables/UsersService.html",[58,1.054,529,1.951]],["body/injectables/UsersService.html",[3,0.177,4,0.177,5,0.139,7,0.197,8,0.776,12,0.025,14,0.888,16,1.006,17,0.677,19,1.142,20,0.533,23,0.177,24,0.007,26,1.592,27,1.24,30,0.011,31,0.011,45,1.482,50,0.891,58,1.002,59,1.024,68,3.183,74,1.24,75,0.952,76,0.605,77,1.163,78,2.932,91,1.137,92,1.194,96,1.923,99,1.487,102,3.49,118,2.142,134,1.137,135,1.798,136,3.406,138,2.452,140,2.793,142,1.855,147,2.463,148,2.275,149,1.585,150,2.565,151,1.798,152,1.585,154,1.798,155,2.275,160,1.855,165,1.798,166,2.463,167,1.588,176,1.791,178,2.102,179,1.798,182,2.216,183,1.798,184,1.798,185,1.024,186,1.798,187,0.833,188,1.798,206,1.798,226,1.482,240,0.891,245,1.024,378,1.585,380,1.798,456,2.019,462,4.183,470,2.793,471,3.688,473,2.793,506,2.216,511,2.793,512,2.793,513,2.792,515,2.793,527,1.798,528,1.585,529,1.855,566,1.798,567,4.04,568,4.04,569,2.12,570,2.12,571,3.294,572,2.12,573,2.12,574,3.294,575,2.12,576,3.294,577,2.12,578,3.294,579,2.12,580,2.12,581,3.294,582,3.294,583,2.12,584,2.12,585,2.12,586,3.294,587,2.12,588,2.12,589,2.12,590,3.294,591,2.12,592,3.294,593,2.12,594,2.12,595,2.12,596,4.04,597,2.12,598,2.12]],["title/classes/ValidationError.html",[24,0.012,91,1.196]],["body/classes/ValidationError.html",[3,0.222,4,0.222,5,0.174,7,0.246,8,0.921,12,0.025,14,0.98,16,0.586,17,0.655,23,0.491,24,0.02,27,0.667,30,0.014,31,0.014,74,0.667,75,0.894,76,0.626,77,0.626,91,1.6,134,1.349,153,1.535,199,0.808,208,1.438,209,2.648,216,2.859,217,1.283,218,2.373,219,2.751,220,1.046,221,3.063,222,2.63,223,2.659,225,2.63,226,2.859,230,1.283,231,2.085,232,2.411,233,1.382,234,1.382,235,1.382,236,2.033,237,2.033,238,1.382,239,2.033,240,1.641,241,3.063,242,2.033,243,2.963,244,1.382,245,1.283,246,1.382,247,1.382,248,1.283,249,1.382,250,1.382,251,1.116,252,1.283,253,1.382,254,1.758,255,1.382,256,1.382,257,1.382,388,2.609,389,1.495,390,1.495,391,1.495,599,3.906,600,2.656]],["title/coverage.html",[601,3.998]],["body/coverage.html",[0,2.168,1,1.588,5,0.155,6,2.001,12,0.025,21,1.329,24,0.022,30,0.012,31,0.012,53,1.446,58,1.722,60,2.001,66,1.588,67,2.001,71,1.446,76,0.289,79,1.329,85,1.446,87,1.446,89,1.764,91,0.815,99,0.869,108,1.446,118,0.928,119,2.192,132,2.001,138,1.062,150,1.329,153,0.928,176,0.928,187,0.928,198,1.764,200,2.001,208,0.869,216,1.062,217,2.735,230,3.405,231,1.062,240,0.992,254,1.062,258,1.228,259,1.446,260,1.764,299,1.764,300,2.001,301,2.001,341,2.406,347,2.248,348,1.588,350,2.001,355,2.001,356,1.446,357,2.674,358,2.001,361,2.001,383,2.001,393,2.674,413,1.588,417,1.588,418,2.001,453,1.588,454,2.001,455,2.001,491,2.674,503,3.033,509,1.588,510,2.001,513,1.446,529,1.329,531,1.764,554,2.001,566,2.001,601,2.001,602,2.001,603,2.36,604,2.36,605,5.179,606,4.819,607,2.674,608,6.516,609,6.639,610,2.001,611,5.832,612,5.45,613,2.001,614,2.001,615,2.001,616,2.001,617,2.001,618,2.36,619,3.662,620,2.001,621,3.577,622,3.662,623,3.662,624,2.001,625,2.001,626,2.001,627,2.001,628,2.001,629,2.36,630,2.36]],["title/dependencies.html",[35,1.873,631,2.167]],["body/dependencies.html",[12,0.025,20,1.093,30,0.019,31,0.019,35,1.956,50,1.826,83,2.447,112,2.924,116,3.249,121,3.249,146,2.664,147,3.249,269,3.685,317,4.639,341,2.924,370,3.685,632,4.347,633,5.988,634,4.347,635,4.347,636,4.347,637,4.347,638,4.347,639,4.347,640,4.347,641,4.347,642,4.347,643,4.347,644,4.347,645,4.347,646,4.347,647,4.347,648,4.347,649,4.347,650,4.347,651,4.347,652,4.347,653,3.685,654,4.347,655,4.347]],["title/miscellaneous/enumerations.html",[656,1.401,657,3.53]],["body/miscellaneous/enumerations.html",[7,0.454,12,0.024,30,0.021,31,0.021,270,3.959,280,4.99,285,4.4,456,3.607,465,5.009,506,3.959,607,3.658,656,2.364,657,4.148,658,4.148,659,5.886]],["title/miscellaneous/functions.html",[656,1.401,660,3.53]],["body/miscellaneous/functions.html",[7,0.46,12,0.023,16,1.094,17,1.064,30,0.021,31,0.021,74,1.246,75,0.956,76,0.607,77,1.168,87,3.634,626,4.201,627,5.38,628,4.201,656,2.394,660,4.201,661,4.956,662,4.201,663,4.956,664,4.956]],["title/index.html",[7,0.269,665,2.9,666,2.9]],["body/index.html",[5,0.295,12,0.024,30,0.016,31,0.016,32,1.269,35,1.453,45,1.453,285,2.413,456,1.979,485,3.809,602,4.736,631,3.862,653,2.737,667,3.229,668,3.229,669,3.229,670,3.229,671,3.229,672,3.229,673,3.229,674,3.229,675,3.229,676,3.229,677,3.229,678,3.229,679,3.229,680,3.229,681,3.229,682,3.229,683,3.809,684,5.586,685,6.236,686,3.229,687,4.493,688,3.229,689,3.229,690,3.229,691,3.229,692,3.229,693,3.229,694,3.229,695,6.236,696,3.229,697,4.493,698,3.229,699,3.229,700,3.809,701,3.229,702,3.229,703,3.229,704,4.493,705,3.229,706,4.493,707,3.229,708,3.229,709,5.167,710,3.229,711,3.229,712,3.229,713,2.737,714,3.229,715,4.493,716,4.493,717,3.229,718,4.493,719,4.493,720,3.229,721,3.229,722,3.229,723,3.229,724,4.493,725,3.229,726,4.493,727,3.229,728,3.229,729,3.229,730,4.493,731,3.229,732,3.229,733,3.229,734,3.229,735,3.229,736,3.229,737,3.229,738,5.167,739,3.229,740,3.229,741,3.229,742,3.229,743,3.229,744,5.167,745,3.229,746,3.229,747,3.229,748,3.229,749,2.737,750,3.229,751,3.229]],["title/modules.html",[34,2.278]],["body/modules.html",[12,0.021,30,0.021,31,0.021,33,3.305,34,2.374,39,3.011,40,2.557,41,2.557,42,3.011,752,6.709,753,6.709,754,6.709,755,6.709]],["title/overview.html",[756,3.998]],["body/overview.html",[2,1.52,12,0.024,21,2.979,30,0.016,31,0.016,33,4.519,34,1.632,35,2.086,36,2.864,37,2.864,38,2.864,39,4.171,40,3.346,41,3.435,42,4.045,43,2.61,44,1.902,45,1.52,59,1.632,79,2.979,104,2.864,106,2.864,107,2.864,108,3.243,138,2.841,199,1.027,258,3.285,293,2.864,294,2.864,295,2.864,349,2.272,445,2.864,447,2.864,448,2.864,529,3.555,560,2.864,561,2.864,562,2.864,756,2.864,757,3.378,758,3.378,759,3.378,760,3.378,761,3.378]],["title/properties.html",[220,1.115,631,2.167]],["body/properties.html",[12,0.024,30,0.021,31,0.021,220,1.405,749,4.447,762,5.245,763,5.245,764,5.245,765,5.245,766,5.245]],["title/miscellaneous/typealiases.html",[656,1.401,767,4.164]],["body/miscellaneous/typealiases.html",[7,0.474,12,0.022,30,0.021,31,0.021,76,0.626,259,3.13,260,4.805,264,3.435,268,4.33,274,5.119,275,5.119,656,2.467,768,5.107,769,6.038]],["title/miscellaneous/variables.html",[656,1.401,770,3.53]],["body/miscellaneous/variables.html",[7,0.22,12,0.025,17,0.915,30,0.013,31,0.013,53,2.199,69,1.772,75,0.932,76,0.805,85,2.199,89,2.682,99,1.321,118,1.41,119,2.959,142,2.921,159,2.092,167,2.228,176,0.931,181,2.02,185,1.733,187,1.898,220,0.961,341,3.248,348,1.594,351,2.009,352,2.009,393,1.772,398,4.386,405,2.413,413,2.413,414,2.009,465,4.874,491,1.772,501,2.009,531,2.682,607,1.772,610,3.671,613,2.009,614,3.042,615,2.009,616,2.009,617,3.042,619,2.009,620,3.042,622,2.009,623,2.009,624,3.042,625,3.042,656,1.145,658,3.042,662,3.671,683,3.042,700,3.042,713,2.009,770,2.009,771,4.33,772,4.33,773,2.37,774,2.37,775,2.37,776,2.37,777,2.37,778,3.588,779,5.839,780,3.588,781,3.588,782,4.33,783,3.588,784,2.37,785,2.37,786,2.37,787,2.37,788,2.37,789,2.37,790,2.37,791,2.37,792,2.37,793,2.37,794,2.37,795,2.37,796,2.37,797,2.37,798,2.37,799,3.588,800,2.37,801,2.37,802,2.37,803,2.37,804,3.588,805,3.588,806,2.37,807,4.33,808,4.33,809,3.588]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":230,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["0.0.1",{"_index":763,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":416,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["10",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["13",{"_index":760,"title":{},"body":{"overview.html":{}}}],["16.0.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":761,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":758,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":252,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["401",{"_index":249,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["403",{"_index":246,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["404",{"_index":242,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["5",{"_index":757,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["5.4.4",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":232,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["7",{"_index":759,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["8.11.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{}}}],["_.get(err",{"_index":337,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_.get(token",{"_index":211,"title":{},"body":{"classes/Authorization.html":{}}}],["_.includes(user.roles",{"_index":277,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["_.intersection(roles",{"_index":213,"title":{},"body":{"classes/Authorization.html":{}}}],["_.omit(user.tojson",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["_id",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ability",{"_index":264,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(action.delete",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.read",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.update",{"_index":443,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory",{"_index":298,"title":{},"body":{"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory.ts",{"_index":260,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:20",{"_index":263,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":265,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":266,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":248,"title":{},"body":{"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["access_token",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessed",{"_index":725,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":480,"title":{},"body":{"injectables/SessionService.html":{}}}],["accesstoken.save",{"_index":482,"title":{},"body":{"injectables/SessionService.html":{}}}],["account",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["action",{"_index":270,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["action.update",{"_index":284,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["adding",{"_index":744,"title":{},"body":{"index.html":{}}}],["additionalproperties",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv",{"_index":341,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ajv(ajvoptions",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(loginschema",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(userschema",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajvoptions",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":768,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allerrors",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedroles",{"_index":204,"title":{},"body":{"classes/Authorization.html":{}}}],["already",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["api",{"_index":684,"title":{},"body":{"index.html":{}}}],["api.git",{"_index":681,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":428,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get(':id",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@httpcode(httpstatus.no_content)@delete(':id",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@put('log",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":429,"title":{},"body":{"controllers/SessionController.html":{}}}],["apibody({schema",{"_index":422,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproperty",{"_index":384,"title":{},"body":{"classes/LoginDto.html":{},"classes/UsersDto.html":{}}}],["apiproperty({required",{"_index":558,"title":{},"body":{"classes/UsersDto.html":{}}}],["apitags",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apitags(capitalizeinitials(routes.auth.name",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(capitalizeinitials(routes.session.name",{"_index":434,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(capitalizeinitials(routes.users.name",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":707,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appability",{"_index":275,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":675,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":309,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(err.errors",{"_index":342,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":683,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["auth.dto",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":432,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":358,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.strategy",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:18",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.strategy.ts:9",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.validation",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/jwt",{"_index":431,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":244,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["authguard",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":360,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":749,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":198,"title":{"classes/Authorization.html":{}},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["authorize",{"_index":202,"title":{},"body":{"classes/Authorization.html":{}}}],["authorize(token",{"_index":203,"title":{},"body":{"classes/Authorization.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":718,"title":{},"body":{"index.html":{}}}],["await",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bad",{"_index":250,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror",{"_index":216,"title":{"classes/BaseError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["baseerror:19",{"_index":391,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:2",{"_index":389,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:3",{"_index":390,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["bcrypt",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync(userdto.password",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["below",{"_index":689,"title":{},"body":{"index.html":{}}}],["blocked",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["body.email",{"_index":440,"title":{},"body":{"controllers/SessionController.html":{}}}],["boolean",{"_index":395,"title":{},"body":{"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":755,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":752,"title":{},"body":{"modules.html":{}}}],["bson",{"_index":477,"title":{},"body":{"injectables/SessionService.html":{}}}],["build",{"_index":276,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["building",{"_index":670,"title":{},"body":{"index.html":{}}}],["can([action.read",{"_index":283,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.manage",{"_index":279,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["capitalizeinitials",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalizeinitials(str",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["casl",{"_index":297,"title":{},"body":{"modules/CaslModule.html":{}}}],["casl/ability",{"_index":269,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["caslabilityfactory",{"_index":258,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":40,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":306,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cd",{"_index":682,"title":{},"body":{"index.html":{}}}],["check",{"_index":722,"title":{},"body":{"index.html":{}}}],["class",{"_index":24,"title":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"overview.html":{}}}],["clients",{"_index":733,"title":{},"body":{"index.html":{}}}],["clone",{"_index":678,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":293,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":294,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":295,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":445,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":448,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":446,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":447,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":560,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":562,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":563,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":561,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":221,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["comparepassword",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(user",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc/compodoc",{"_index":721,"title":{},"body":{"index.html":{}}}],["components/auth/auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["components/auth/auth.service",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/sessions/session.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["components/users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["condition",{"_index":473,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["condition._id",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["conditions",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.jwt_secret",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["constructor(code",{"_index":224,"title":{},"body":{"classes/BaseError.html":{}}}],["constructor(message",{"_index":241,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(sessionmodel",{"_index":458,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usermodel",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(routes.auth.route",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(routes.session.route",{"_index":435,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(routes.users.route",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":601,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":456,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["create(@body",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(data",{"_index":461,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(userdto",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createforuser",{"_index":261,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":262,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["csrf",{"_index":740,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":318,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":321,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":320,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":723,"title":{},"body":{"index.html":{}}}],["currentenv",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":466,"title":{},"body":{"injectables/SessionService.html":{}}}],["date().toisostring",{"_index":332,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["debug",{"_index":711,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{}}}],["default",{"_index":398,"title":{},"body":{"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["delete",{"_index":506,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(@request",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(req",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(userid",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletemany",{"_index":457,"title":{},"body":{"injectables/SessionService.html":{}}}],["deletemany(userid",{"_index":467,"title":{},"body":{"injectables/SessionService.html":{}}}],["deleteresult",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":764,"title":{},"body":{"properties.html":{}}}],["details",{"_index":289,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":287,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":290,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["dev_host=http://localhost:3000",{"_index":691,"title":{},"body":{"index.html":{}}}],["dev_mongo_uri=your_mongo_uri_replicaset",{"_index":692,"title":{},"body":{"index.html":{}}}],["dev_port=3000",{"_index":690,"title":{},"body":{"index.html":{}}}],["development",{"_index":700,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":394,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["documentation",{"_index":602,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["efficient",{"_index":671,"title":{},"body":{"index.html":{}}}],["eg",{"_index":734,"title":{},"body":{"index.html":{}}}],["elkomy",{"_index":751,"title":{},"body":{"index.html":{}}}],["elkomy/auth",{"_index":680,"title":{},"body":{"index.html":{}}}],["email",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":747,"title":{},"body":{"index.html":{}}}],["enhancements",{"_index":737,"title":{},"body":{"index.html":{}}}],["enum",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":657,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":688,"title":{},"body":{"index.html":{}}}],["envs",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envs[currentenv",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":314,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.errors",{"_index":344,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.status",{"_index":335,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error",{"_index":219,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors",{"_index":209,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors.0.instancepath",{"_index":338,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors.0.message",{"_index":339,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["everything",{"_index":282,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["example",{"_index":436,"title":{},"body":{"controllers/SessionController.html":{}}}],["exception",{"_index":311,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":310,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:33",{"_index":313,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":328,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":327,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.status",{"_index":324,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exists",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":317,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":218,"title":{},"body":{"classes/BaseError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/ValidationError.html":{}}}],["extractjwt",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":267,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":245,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["false",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":441,"title":{},"body":{"controllers/SessionController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"index.html":{}}}],["filterquery",{"_index":471,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["find",{"_index":748,"title":{},"body":{"index.html":{}}}],["findone",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["findone(condition",{"_index":470,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["format",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":669,"title":{},"body":{"index.html":{}}}],["function",{"_index":503,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":660,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":705,"title":{},"body":{"index.html":{}}}],["generated",{"_index":719,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('health",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get(@request",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(req",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":665,"title":{"index.html":{}},"body":{}}],["git",{"_index":677,"title":{},"body":{"index.html":{}}}],["handle",{"_index":340,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hasaccess",{"_index":214,"title":{},"body":{"classes/Authorization.html":{}}}],["heading",{"_index":726,"title":{},"body":{"index.html":{}}}],["hello",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":739,"title":{},"body":{"index.html":{}}}],["host",{"_index":308,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{}}}],["host.switchtohttp",{"_index":319,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":307,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":299,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":286,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://github.com/sanaa",{"_index":679,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":315,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":325,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["iconfig",{"_index":348,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":323,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ignoreexpiration",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":256,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["implements",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":731,"title":{},"body":{"index.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":268,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["inherited",{"_index":388,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectconnection",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(session.name",{"_index":479,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmodel(user.name",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["insomnia",{"_index":735,"title":{},"body":{"index.html":{}}}],["install",{"_index":703,"title":{},"body":{"index.html":{}}}],["installation",{"_index":676,"title":{},"body":{"index.html":{}}}],["installyou",{"_index":686,"title":{},"body":{"index.html":{}}}],["instancepath",{"_index":336,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["integrating",{"_index":738,"title":{},"body":{"index.html":{}}}],["interface",{"_index":347,"title":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":349,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"overview.html":{}}}],["internal",{"_index":233,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["intersectedroles",{"_index":212,"title":{},"body":{"classes/Authorization.html":{}}}],["intersectedroles.length",{"_index":215,"title":{},"body":{"classes/Authorization.html":{}}}],["involved",{"_index":701,"title":{},"body":{"index.html":{}}}],["ispasswordmatching",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalid",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["item",{"_index":291,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":292,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":730,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expires_in",{"_index":351,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwt_expires_in=60dpre",{"_index":694,"title":{},"body":{"index.html":{}}}],["jwt_secret",{"_index":352,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret=your_secret",{"_index":693,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":356,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":150,"title":{"interfaces/JWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"interfaces/JWTPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":108,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["license",{"_index":765,"title":{},"body":{"properties.html":{}}}],["limiting",{"_index":743,"title":{},"body":{"index.html":{}}}],["literal",{"_index":421,"title":{},"body":{"controllers/SessionController.html":{}}}],["locally",{"_index":699,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["log",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger",{"_index":745,"title":{},"body":{"index.html":{}}}],["login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":71,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginschema",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logout(@request",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(req",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(token",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["manage",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["match",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":226,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["metadata",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":255,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["methodnotimplementederror",{"_index":254,"title":{"classes/MethodNotImplementedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["miscellaneous",{"_index":656,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":746,"title":{},"body":{"index.html":{}}}],["mode",{"_index":709,"title":{},"body":{"index.html":{}}}],["model",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo_uri",{"_index":353,"title":{},"body":{"interfaces/IConfig.html":{}}}],["mongodb",{"_index":696,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mongoose.clientsession",{"_index":463,"title":{},"body":{"injectables/SessionService.html":{}}}],["mongoose.connection",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["mongoosemodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongo_uri",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":687,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"dependencies.html":{}}}],["new",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":668,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":240,"title":{"classes/NotFoundError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["notfounderror(`user",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":685,"title":{},"body":{"index.html":{}}}],["null",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":225,"title":{},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["obj",{"_index":504,"title":{},"body":{"classes/User.html":{}}}],["obj.password",{"_index":507,"title":{},"body":{"classes/User.html":{}}}],["object",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(roles",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":476,"title":{},"body":{"injectables/SessionService.html":{}}}],["objectid(userid",{"_index":487,"title":{},"body":{"injectables/SessionService.html":{}}}],["ok",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["one",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["openapi",{"_index":728,"title":{},"body":{"index.html":{}}}],["optional",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":756,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":631,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["param",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["parsevalidationerrors",{"_index":305,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsevalidationerrors(err",{"_index":312,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["passport",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":329,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["pattern",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{}}}],["payload.details",{"_index":343,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.message",{"_index":345,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.sessionid",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["port",{"_index":354,"title":{},"body":{"interfaces/IConfig.html":{}}}],["possibly",{"_index":727,"title":{},"body":{"index.html":{}}}],["post",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["postman",{"_index":736,"title":{},"body":{"index.html":{}}}],["private",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":702,"title":{},"body":{"index.html":{}}}],["process.env.jwt_expires_in",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":713,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":667,"title":{},"body":{"index.html":{}}}],["project",{"_index":724,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":400,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({select",{"_index":495,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":396,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":493,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":220,"title":{"properties.html":{}},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["protection",{"_index":741,"title":{},"body":{"index.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":426,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["put('log",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('revoke",{"_index":439,"title":{},"body":{"controllers/SessionController.html":{}}}],["rate",{"_index":742,"title":{},"body":{"index.html":{}}}],["read",{"_index":280,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ref",{"_index":404,"title":{},"body":{"classes/Session.html":{}}}],["reflect",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["regex.name",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex.password",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replica",{"_index":697,"title":{},"body":{"index.html":{}}}],["req",{"_index":425,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":251,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{}}}],["request.url",{"_index":330,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":405,"title":{},"body":{"classes/Session.html":{},"controllers/SessionController.html":{},"classes/UsersDto.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":316,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(payload",{"_index":334,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rest",{"_index":732,"title":{},"body":{"index.html":{}}}],["results",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["revoked",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{}}}],["revokeuser",{"_index":419,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["revokeuser(email",{"_index":474,"title":{},"body":{"injectables/SessionService.html":{}}}],["revokeuser(req",{"_index":420,"title":{},"body":{"controllers/SessionController.html":{}}}],["rimraf",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["roles",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":278,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["roleslist",{"_index":610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rs",{"_index":704,"title":{},"body":{"index.html":{}}}],["run",{"_index":695,"title":{},"body":{"index.html":{}}}],["running",{"_index":706,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["sanaa",{"_index":750,"title":{},"body":{"index.html":{}}}],["saved",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":672,"title":{},"body":{"index.html":{}}}],["schema",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":408,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(session",{"_index":414,"title":{},"body":{"classes/Session.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":501,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":409,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.boolean",{"_index":412,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.objectid",{"_index":411,"title":{},"body":{"classes/Session.html":{}}}],["secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":500,"title":{},"body":{"classes/User.html":{}}}],["select('+password",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":673,"title":{},"body":{"index.html":{}}}],["session",{"_index":176,"title":{"classes/Session.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session._id",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.blocked",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.controller",{"_index":451,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.email",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.interface",{"_index":478,"title":{},"body":{"injectables/SessionService.html":{}}}],["session.name",{"_index":452,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.revoked",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.roles",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.schema",{"_index":433,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session.service",{"_index":430,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.username",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessioncontroller",{"_index":417,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{}}}],["sessionmodel",{"_index":460,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionmodule",{"_index":41,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionpayload",{"_index":453,"title":{"interfaces/SessionPayload.html":{}},"body":{"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["sessions",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sessions/session.module",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["sessions/session.service",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["sessionschema",{"_index":413,"title":{},"body":{"classes/Session.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionschema.index",{"_index":415,"title":{},"body":{"classes/Session.html":{}}}],["sessionservice",{"_index":138,"title":{"injectables/SessionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":485,"title":{},"body":{"injectables/SessionService.html":{},"index.html":{}}}],["side",{"_index":674,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["specification",{"_index":729,"title":{},"body":{"index.html":{}}}],["src/.../auth.validation.ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":769,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constant.ts",{"_index":658,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../regex.ts",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.schema.ts",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.schema.ts",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.validation.ts",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validator.ts",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["src/casl/casl",{"_index":259,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/casl/casl.module",{"_index":450,"title":{},"body":{"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["src/casl/casl.module.ts",{"_index":296,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/common/authorization.ts",{"_index":200,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/common/authorization.ts:6",{"_index":205,"title":{},"body":{"classes/Authorization.html":{}}}],["src/common/constant",{"_index":271,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/common/constant.ts",{"_index":607,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/common/errors.ts",{"_index":217,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["src/common/errors.ts:19",{"_index":229,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:2",{"_index":228,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:28",{"_index":392,"title":{},"body":{"classes/NotFoundError.html":{}}}],["src/common/errors.ts:3",{"_index":227,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:34",{"_index":488,"title":{},"body":{"classes/UnauthenticatedError.html":{}}}],["src/common/errors.ts:40",{"_index":489,"title":{},"body":{"classes/UnauthorizedError.html":{}}}],["src/common/errors.ts:47",{"_index":599,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/common/errors.ts:54",{"_index":387,"title":{},"body":{"classes/MethodNotImplementedError.html":{}}}],["src/common/errors.ts:60",{"_index":490,"title":{},"body":{"classes/UnexpectedError.html":{}}}],["src/common/regex.ts",{"_index":613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/routes",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/common/routes.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/types",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/common/types.ts",{"_index":355,"title":{},"body":{"interfaces/JWTPayload.html":{},"coverage.html":{}}}],["src/common/validator.ts",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/components/auth/auth.controller.ts:16",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/components/auth/auth.dto.ts",{"_index":383,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/components/auth/auth.dto.ts:5",{"_index":385,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.dto.ts:8",{"_index":386,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/components/auth/auth.service.ts",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/components/auth/auth.service.ts:14",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:31",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.validation.ts",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/jwt",{"_index":357,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts",{"_index":418,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts:28",{"_index":424,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/components/sessions/session.interface.ts",{"_index":454,"title":{},"body":{"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["src/components/sessions/session.module.ts",{"_index":449,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/components/sessions/session.schema",{"_index":273,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["src/components/sessions/session.schema.ts",{"_index":393,"title":{},"body":{"classes/Session.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/sessions/session.schema.ts:14",{"_index":406,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:17",{"_index":407,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:20",{"_index":401,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:23",{"_index":403,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:29",{"_index":402,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:35",{"_index":399,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.service.ts",{"_index":455,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/components/sessions/session.service.ts:11",{"_index":459,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:16",{"_index":464,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:24",{"_index":472,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:28",{"_index":475,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:35",{"_index":468,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/users/users.controller.ts",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/components/users/users.controller.ts:36",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:48",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:60",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:74",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.dto.ts",{"_index":554,"title":{},"body":{"classes/UsersDto.html":{},"coverage.html":{}}}],["src/components/users/users.dto.ts:11",{"_index":556,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:14",{"_index":557,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:5",{"_index":559,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:8",{"_index":555,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.module.ts",{"_index":564,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/components/users/users.schema",{"_index":272,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["src/components/users/users.schema.ts",{"_index":491,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/users.schema.ts:12",{"_index":494,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:15",{"_index":496,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:18",{"_index":497,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:24",{"_index":492,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:9",{"_index":498,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.service.ts",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/components/users/users.service.ts:13",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:20",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:50",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:58",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:62",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.validation.ts",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/config/config.interface.ts",{"_index":350,"title":{},"body":{"interfaces/IConfig.html":{},"coverage.html":{}}}],["src/config/index.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/filters/http",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/utils/index.ts",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["staging",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start:debug",{"_index":712,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":710,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":714,"title":{},"body":{"index.html":{}}}],["started",{"_index":666,"title":{"index.html":{}},"body":{}}],["starting",{"_index":698,"title":{},"body":{"index.html":{}}}],["statements",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":201,"title":{},"body":{"classes/Authorization.html":{}}}],["status",{"_index":222,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["statuscode",{"_index":326,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["str",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategy",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":288,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":274,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(0",{"_index":243,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super(message",{"_index":235,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super_admin",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":753,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":754,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":653,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["table",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":717,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":437,"title":{},"body":{"controllers/SessionController.html":{}}}],["tests",{"_index":716,"title":{},"body":{"index.html":{}}}],["this.appservice.gethealth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(req.user",{"_index":442,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["this.code",{"_index":236,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.comparepassword(user",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.connection.startsession",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.errors",{"_index":253,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.jwtservice.sign(payload",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.message",{"_index":239,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.name",{"_index":237,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.parsevalidationerrors(exception",{"_index":333,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.sessionmodel(data",{"_index":481,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.deletemany",{"_index":486,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.findone(condition",{"_index":483,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.updateone",{"_index":484,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.create",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.sessionservice.deletemany(userid",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sessionservice.findone",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.sessionservice.revokeuser(body.email",{"_index":444,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.revokeuser(token.email",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.status",{"_index":238,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.toobject",{"_index":505,"title":{},"body":{"classes/User.html":{}}}],["this.usermodel",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.deleteone(condition",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone(condition",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(userdto",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.delete(userid",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(conditions",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.logout(req.user",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":331,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["tojson",{"_index":223,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["token",{"_index":206,"title":{},"body":{"classes/Authorization.html":{},"injectables/UsersService.html":{}}}],["tools",{"_index":234,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["transaction",{"_index":462,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["transaction.endsession",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["transaction.withtransaction(async",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["true",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":322,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":767,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":210,"title":{},"body":{"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{}}}],["ui",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["unauthenticatederror",{"_index":153,"title":{"classes/UnauthenticatedError.html":{}},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unauthenticatederror('password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthenticatederror('user",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorized",{"_index":247,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unauthorizederror",{"_index":208,"title":{"classes/UnauthorizedError.html":{}},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["undefined",{"_index":397,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["undefined})@apibearerauth()@useguards(jwtauthguard)@put('revoke",{"_index":423,"title":{},"body":{"controllers/SessionController.html":{}}}],["unexpected",{"_index":257,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unexpectederror",{"_index":231,"title":{"classes/UnexpectedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unique",{"_index":499,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":715,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":469,"title":{},"body":{"injectables/SessionService.html":{}}}],["unlicensed",{"_index":766,"title":{},"body":{"properties.html":{}}}],["update",{"_index":285,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["updatedresult",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedresult.modifiedcount",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["usedefaults",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":427,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":438,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":118,"title":{"classes/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Session.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.blocked",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userdto",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.controller",{"_index":565,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.schema",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.validation",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.schema",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{}}}],["userschema",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.index",{"_index":508,"title":{},"body":{"classes/User.html":{}}}],["userschema.methods.tojson",{"_index":502,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":509,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdto",{"_index":513,"title":{"classes/UsersDto.html":{}},"body":{"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userservice",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":529,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":720,"title":{},"body":{"index.html":{}}}],["validate",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatelogin",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validatelogin(logindto",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["validatelogin.errors",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateuser",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validateuser(userdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["validateuser.errors",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["validation",{"_index":346,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerror",{"_index":91,"title":{"classes/ValidationError.html":{}},"body":{"controllers/AuthController.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["validationerror(null",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["value",{"_index":465,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":770,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":762,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":410,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["void",{"_index":207,"title":{},"body":{"classes/Authorization.html":{},"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":708,"title":{},"body":{"index.html":{}}}],["world",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":281,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["yes",{"_index":600,"title":{},"body":{"classes/ValidationError.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z][^&<>*:\"~$%]{1,49",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  getHealth(): string {\n    return this.appService.getHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './components/users/users.module';\nimport { config } from './config';\nimport { AuthModule } from './components/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { SessionModule } from './components/sessions/session.module';\nimport { CaslModule } from './casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(config.mongo_uri),\n    UsersModule,\n    AuthModule,\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  getHealth(): string {\n    return 'OK';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Body } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LoginDto } from './auth.dto';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { validateLogin } from './auth.validation';\nimport { ValidationError } from 'src/common/errors';\n\n@ApiTags(capitalizeInitials(ROUTES.auth.name))\n@Controller(ROUTES.auth.route)\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  async login(@Body() loginDto: LoginDto): Promise {\n    const isValid = validateLogin(loginDto);\n    if (!isValid) {\n      new ValidationError(null, validateLogin.errors);\n    }\n    return await this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSessionModule\n\nSessionModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from '../../components/auth/auth.controller';\nimport { AuthService } from '../../components/auth/auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { config } from 'src/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/users.schema';\nimport { JwtStrategy } from './jwt-auth.strategy';\nimport { SessionModule } from '../sessions/session.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: config.jwt_secret,\n    }),\n    SessionModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(user: User, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './auth.dto';\nimport * as bcrypt from 'bcrypt';\nimport { Model } from 'mongoose';\nimport { User } from '../users/users.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { JWTPayload } from 'src/common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from 'src/common/errors';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private jwtService: JwtService,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async comparePassword(user: User, password: string): Promise {\n    if (user) {\n      const isPasswordMatching = await bcrypt.compare(password, user.password);\n      if (isPasswordMatching) {\n        return true;\n      }\n    }\n    throw new UnauthenticatedError('Password do not match the saved one');\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const user = await this.userModel\n      .findOne({ email: loginDto.email })\n      .select('+password');\n\n    await this.comparePassword(user, loginDto.password);\n\n    if (user && user.blocked) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    let session = await this.sessionService.findOne({\n      userId: user._id,\n      revoked: false,\n    });\n\n    if (session == null) {\n      session = await this.sessionService.create({\n        userId: user._id,\n        email: user.email,\n        userName: user.username,\n        roles: user.roles,\n      });\n    }\n\n    const payload: JWTPayload = {\n      userId: session._id,\n      sessionId: session._id,\n      email: session.email,\n      username: session.username,\n      roles: session.roles,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: _.omit(user.toJSON(), ['password']),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/authorization.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                authorize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                    \n                    authorize(token: JWTPayload, allowedRoles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/authorization.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allowedRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { UnauthorizedError } from './errors';\nimport { JWTPayload } from './types';\n\nexport class Authorization {\n  static authorize(token: JWTPayload, allowedRoles: string[]) {\n    const roles = _.get(token, 'roles', []);\n    const intersectedRoles = _.intersection(roles, allowedRoles);\n    const hasAccess = intersectedRoles.length ? true : false;\n    if (hasAccess === false) {\n      throw new UnauthorizedError();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseError.html":{"url":"classes/BaseError.html","title":"class - BaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(code: number, name: string, status: number, message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in src/common/errors.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl-ability.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\nimport { Action, Roles } from 'src/common/constant';\nimport { User } from 'src/components/users/users.schema';\nimport { Session } from 'src/components/sessions/session.schema';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, build } = new AbilityBuilder>(\n      Ability as AbilityClass,\n    );\n\n    if (_.includes(user.roles, Roles.ADMIN)) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can([Action.Read, Action.Update], User); // read-update access to everything\n    }\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                parseValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseValidationErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseValidationErrors(err: any, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    //@ts-ignore\n    const status = exception.status || HttpStatus.INTERNAL_SERVER_ERROR;\n    const payload = {\n      statusCode: status,\n      name: exception.name,\n      message: exception.message || 'Error',\n      path: request.url,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.parseValidationErrors(exception, payload);\n\n    response.status(status).json(payload);\n  }\n\n  private parseValidationErrors(err: any, payload: any) {\n    if (err.status && err.status === 400) {\n      const instancePath = _.get(err, 'errors.0.instancePath');\n      const message = _.get(err, 'errors.0.message');\n      // Handle ajv errors\n      if (Array.isArray(err.errors)) {\n        payload.details = err.errors;\n        payload.message = `Validation error: \"${instancePath}\" ${message}`;\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            jwt_expires_in\n                                        \n                                \n                                \n                                        \n                                            jwt_secret\n                                        \n                                \n                                \n                                        \n                                            mongo_uri\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_expires_in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_expires_in:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mongo_uri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongo_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  port: number;\n  host: string;\n  mongo_uri: string;\n  jwt_secret: string;\n  jwt_expires_in: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTPayload {\n  userId: string;\n  sessionId: string;\n  email: string;\n  username: string;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/jwt-auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/jwt-auth.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { config } from 'src/config';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from 'src/common/errors';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private sessionService: SessionService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: config.jwt_secret,\n    });\n  }\n\n  async validate(payload: Record): Promise {\n    const session = await this.sessionService.findOne({\n      _id: payload.sessionId,\n    });\n\n    if (session == null) {\n      throw new UnauthenticatedError('User session is not found');\n    }\n\n    if (session.revoked === true) {\n      throw new UnauthenticatedError('User session is revoked');\n    }\n\n    if (session.blocked === true) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodNotImplementedError.html":{"url":"classes/MethodNotImplementedError.html","title":"class - MethodNotImplementedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodNotImplementedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Session.html":{"url":"classes/Session.html","title":"class - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                revoked\n                            \n                            \n                                roles\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\nimport { User } from '../users/users.schema';\n\n@Schema({\n  versionKey: false,\n})\nexport class Session extends Document {\n  @Prop({\n    type: SchemaTypes.ObjectId,\n    ref: User.name,\n    required: true,\n  })\n  userId: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  revoked: boolean;\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const SessionSchema = SchemaFactory.createForClass(Session);\n\nSessionSchema.index({ userId: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(req, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({schema: undefined})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('revoke')\n                \n            \n\n            \n                \n                    Defined in src/components/sessions/session.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Put, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { UnauthorizedError, ValidationError } from 'src/common/errors';\nimport { SessionService } from './session.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslAbilityFactory } from 'src/casl/casl-ability.factory';\nimport { Action } from 'src/common/constant';\nimport { Session } from './session.schema';\n\n@ApiTags(capitalizeInitials(ROUTES.session.name))\n@Controller(ROUTES.session.route)\nexport class SessionController {\n  constructor(\n    private readonly sessionService: SessionService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @ApiBody({\n    schema: {\n      example: { email: 'test@gmail.com' },\n    },\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('revoke')\n  async revokeUser(\n    @Request() req,\n    @Body() body: { email: string },\n  ): Promise {\n    if (!body.email) {\n      new ValidationError(null, `Email field is required`);\n    }\n\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, Session)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.sessionService.revokeUser(body.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/sessions/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CaslModule } from 'src/casl/casl.module';\nimport { SessionController } from './session.controller';\nimport { Session, SessionSchema } from './session.schema';\nimport { SessionService } from './session.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Session.name, schema: SessionSchema }]),\n    CaslModule,\n  ],\n  controllers: [SessionController],\n  providers: [SessionService],\n  exports: [SessionService],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionPayload.html":{"url":"interfaces/SessionPayload.html","title":"interface - SessionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SessionPayload {\n  userId: string;\n  userName: string;\n  email: string;\n  roles: string[];\n  revoked?: boolean;\n  blocked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/sessions/session.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: SessionPayload, transaction: mongoose.ClientSession | null)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SessionPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(userId: string, transaction: mongoose.ClientSession)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ObjectId } from 'bson';\nimport * as mongoose from 'mongoose';\n\nimport { Model, FilterQuery } from 'mongoose';\nimport { SessionPayload } from './session.interface';\nimport { Session } from './session.schema';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    @InjectModel(Session.name) private sessionModel: Model,\n  ) {}\n\n  async create(\n    data: SessionPayload,\n    transaction: mongoose.ClientSession | null = null,\n  ): Promise {\n    const accessToken = new this.sessionModel(data);\n    return accessToken.save({ session: transaction });\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.sessionModel.findOne(condition);\n  }\n\n  async revokeUser(email: string): Promise {\n    return this.sessionModel.updateOne(\n      { email, revoked: false },\n      { $set: { revoked: true } },\n    );\n  }\n\n  async deleteMany(userId: string, transaction: mongoose.ClientSession) {\n    return this.sessionModel.deleteMany(\n      {\n        userId: new ObjectId(userId),\n      },\n      { session: transaction },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthenticatedError.html":{"url":"classes/UnauthenticatedError.html","title":"class - UnauthenticatedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthenticatedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedError.html":{"url":"classes/UnexpectedError.html","title":"class - UnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\n\n@Schema({\n  versionKey: false,\n})\nexport class User extends Document {\n  @Prop()\n  username: string;\n\n  @Prop({ unique: true })\n  email: string;\n\n  @Prop({ select: false })\n  password: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.methods.toJSON = function () {\n  const obj = this.toObject();\n  delete obj.password;\n  return obj;\n};\n\nUserSchema.index({ email: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('log-out')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { FilterQuery } from 'mongoose';\nimport { CaslAbilityFactory } from 'src/casl/casl-ability.factory';\nimport { Action } from 'src/common/constant';\nimport { UnauthorizedError, ValidationError } from 'src/common/errors';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\nimport { UsersService } from './users.service';\nimport { validateUser } from './users.validation';\n\n@ApiTags(capitalizeInitials(ROUTES.users.name))\n@Controller(ROUTES.users.route)\nexport class UsersController {\n  constructor(\n    private readonly userService: UsersService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @Post()\n  async create(@Body() userDto: UsersDto): Promise {\n    const isValid = validateUser(userDto);\n    if (!isValid) {\n      throw new ValidationError(null, validateUser.errors);\n    }\n\n    return await this.userService.create(userDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('log-out')\n  async logOut(@Request() req: any): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.logOut(req.user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async get(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Read, User)) {\n      throw new UnauthorizedError();\n    }\n\n    const conditions: FilterQuery = { _id: userId };\n    return await this.userService.findOne(conditions);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Delete, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.delete(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersDto.html":{"url":"classes/UsersDto.html","title":"class - UsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                roles\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UsersDto {\n  @ApiProperty({ required: true })\n  readonly username: string;\n\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n\n  @ApiProperty()\n  readonly roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './users.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { SessionModule } from '../sessions/session.module';\nimport { CaslModule } from 'src/casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, connection: mongoose.Connection, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    mongoose.Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(token: JWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\nimport * as mongoose from 'mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { NotFoundError, ValidationError } from 'src/common/errors';\nimport { JWTPayload } from 'src/common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @InjectConnection() private readonly connection: mongoose.Connection,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async create(userDto: UsersDto): Promise {\n    let user = await this.userModel.findOne({ email: userDto.email });\n\n    if (user) {\n      throw new ValidationError(\n        `user with email ${userDto.email} already exists`,\n      );\n    }\n\n    let session = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      const password = bcrypt.hashSync(userDto.password, 10);\n      user = new this.userModel({ ...userDto, password });\n      await user.save({ session: transaction });\n      session = await this.sessionService.create(\n        {\n          userId: user._id,\n          email: user.email,\n          userName: user.username,\n          roles: user.roles,\n        },\n        transaction,\n      );\n    });\n\n    await transaction.endSession();\n    return session;\n  }\n\n  async logOut(token: JWTPayload): Promise {\n    const updatedResult = await this.sessionService.revokeUser(token.email);\n    if (updatedResult.modifiedCount) {\n      return { message: 'log-out successful' };\n    }\n    return { message: 'log-out failed' };\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.userModel.findOne(condition);\n  }\n\n  async delete(userId: string): Promise {\n    const condition: FilterQuery = { _id: userId };\n    const user = await this.userModel.findOne(condition);\n\n    if (!user) {\n      throw new NotFoundError(`user with id ${condition._id} is not found`);\n    }\n\n    let deleteResult = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      deleteResult = await this.userModel.deleteOne(condition);\n      await this.sessionService.deleteMany(userId, transaction);\n    });\n    await transaction.endSession();\n\n    return deleteResult;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errors\n                            \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, errors?: any)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/authorization.ts\n            \n            class\n            Authorization\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            RolesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            BaseError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            MethodNotImplementedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthenticatedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnexpectedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            ValidationError\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/regex.ts\n            \n            variable\n            regex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/routes.ts\n            \n            variable\n            ROUTES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/types.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/validator.ts\n            \n            variable\n            AjvOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/auth/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            LoginSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            validateLogin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/sessions/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/sessions/session.interface.ts\n            \n            interface\n            SessionPayload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            class\n            Session\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            variable\n            SessionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/sessions/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.dto.ts\n            \n            class\n            UsersDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            validateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            IConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            currentEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            envs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/index.ts\n            \n            function\n            capitalizeInitials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.4\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            ajv : ^8.11.0\n        \n            bcrypt : ^5.0.1\n        \n            dotenv : ^16.0.1\n        \n            lodash : ^4.17.21\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constant.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            capitalizeInitials   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalizeInitials\n                        \n                    \n                \n            \n            \n                \ncapitalizeInitials(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nInstallation\n$ git clone https://github.com/Sanaa-Elkomy/auth-api.git\n$ cd auth-api\n$ npm installYou need create an .env file like below\nDEV_PORT=3000\nDEV_HOST=http://localhost:3000\nDEV_MONGO_URI=Your_Mongo_Uri_ReplicaSet\nJWT_SECRET=Your_Secret\nJWT_EXPIRES_IN=60dPre-Run Dependencies\n# You need a MongoDB replica set, and starting a replica set locally for development is an involved process\n$ npm install run-rs -g\n$ run-rs npm module\nRunning the app\n# development watch mode\n$ npm run start:dev\n\n# debug mode\n$ npm run start:debug\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\nDocumentation\n\nDocumentation is automatically generated using @compodoc/compodoc,\nCheck out current project documentation on /auth-api.\n\n\nA Swagger documentation is also automatically generated and can be accessed by running the project and heading to /api\nand possibly the openapi specification json file that can be imported in rest clients (eg,. insomnia, postman) by heading to /api-json\n\nEnhancements\n\nIntegrating with Helmet Package\nIntegrating with CSRF Protection Package\nIntegrating with Rate Limiting Package\nAdding Logger\nAdding Unit Tests\nAdding missing Endpoints (find, update)\n\nAuthor\n\n@Sanaa-Elkomy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (src/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ajv   (src/.../auth.validation.ts)\n                        \n                        \n                            ajv   (src/.../users.validation.ts)\n                        \n                        \n                            AjvOptions   (src/.../validator.ts)\n                        \n                        \n                            config   (src/.../index.ts)\n                        \n                        \n                            currentEnv   (src/.../index.ts)\n                        \n                        \n                            envs   (src/.../index.ts)\n                        \n                        \n                            LoginSchema   (src/.../auth.validation.ts)\n                        \n                        \n                            regex   (src/.../regex.ts)\n                        \n                        \n                            Roles   (src/.../constant.ts)\n                        \n                        \n                            RolesList   (src/.../constant.ts)\n                        \n                        \n                            ROUTES   (src/.../routes.ts)\n                        \n                        \n                            SessionSchema   (src/.../session.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.validation.ts)\n                        \n                        \n                            validateLogin   (src/.../auth.validation.ts)\n                        \n                        \n                            validateUser   (src/.../users.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/auth/auth.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n  },\n  required: ['email', 'password'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateLogin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(LoginSchema)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    username: { type: 'string', pattern: regex.name },\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n    roles: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: RolesList,\n      },\n    },\n  },\n  required: ['username', 'email', 'password', 'roles'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(UserSchema)\n                    \n                \n\n\n        \n    \n\n    src/common/validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AjvOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n  allErrors: true,\n  useDefaults: true,\n  formats: { email: true },\n}\n                    \n                \n\n\n        \n    \n\n    src/config/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...envs[currentEnv],\n  jwt_secret: process.env.JWT_SECRET,\n  jwt_expires_in: process.env.JWT_EXPIRES_IN,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentEnv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV || 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  development,\n  staging,\n  production,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/regex.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        regex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  name: '^[a-zA-Z][^&<>*:\"~$%]{1,49}$',\n  password:\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUPER_ADMIN: 'super_admin',\n  ADMIN: 'admin',\n  USER: 'user',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RolesList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(Roles)\n                    \n                \n\n\n        \n    \n\n    src/common/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROUTES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  users: {\n    route: 'users',\n    name: 'users',\n  },\n  auth: {\n    route: 'login',\n    name: 'auth',\n  },\n  session: {\n    route: 'sessions',\n    name: 'sessions',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/components/sessions/session.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Session)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.559,1,2.33]],["body/controllers/AppController.html",[0,2.419,1,3.616,2,1.902,3,0.353,4,0.314,5,0.314,6,3.583,7,0.392,8,1.267,9,5.274,10,5.274,11,2.597,12,0.025,13,5.376,14,0.968,15,4.227,16,1.187,17,1.043,18,4.227,19,1.038,20,1.062,21,3.328,22,3.583,23,0.353,24,0.014,25,3.159,26,2.042,27,1.351,28,4.227,29,4.227,30,0.019,31,0.019]],["title/modules/AppModule.html",[32,1.456,33,2.33]],["body/modules/AppModule.html",[1,3.635,2,2.145,3,0.294,4,0.262,5,0.262,12,0.025,19,1.27,20,0.885,21,3.514,22,2.984,23,0.294,24,0.012,30,0.017,31,0.017,32,2.003,33,4.605,34,1.7,35,2.303,36,2.984,37,2.984,38,2.984,39,3.824,40,3.248,41,3.248,42,3.824,43,2.684,44,1.982,45,1.7,46,3.519,47,2.921,48,3.206,49,2.367,50,1.479,51,3.519,52,3.519,53,2.921,54,3.519,55,3.519,56,3.519,57,3.519]],["title/injectables/AppService.html",[21,1.951,58,1.054]],["body/injectables/AppService.html",[3,0.373,4,0.333,5,0.333,7,0.415,8,1.313,9,5.383,10,5.383,12,0.024,14,1.003,16,1.23,17,1.064,19,0.863,20,1.124,21,3.136,23,0.373,24,0.015,27,1.4,30,0.019,31,0.019,58,1.694,59,2.16,60,3.791,61,4.472,62,4.472,63,4.472,64,4.472,65,4.472]],["title/controllers/AuthController.html",[0,1.559,66,2.33]],["body/controllers/AuthController.html",[0,1.654,2,1.654,3,0.307,4,0.273,5,0.273,7,0.341,8,1.157,11,1.776,12,0.025,14,0.662,16,0.811,19,1.265,20,0.924,23,0.307,24,0.013,25,2.748,26,1.776,27,0.924,30,0.017,31,0.017,66,3.301,67,3.116,68,2.875,69,3.669,70,3.116,71,3.873,72,4.684,73,3.676,74,0.924,75,0.709,76,0.451,77,0.866,78,2.554,79,3.111,80,3.676,81,2.748,82,2.748,83,2.07,84,3.116,85,2.253,86,2.748,87,2.253,88,2.748,89,2.748,90,3.676,91,1.269,92,2.07,93,3.676,94,3.676,95,3.676,96,1.353,97,4.161,98,3.676,99,1.353,100,2.748,101,3.676,102,2.07,103,3.676]],["title/modules/AuthModule.html",[32,1.456,39,2.123]],["body/modules/AuthModule.html",[2,2.08,3,0.281,4,0.25,5,0.25,12,0.025,19,1.273,20,0.846,23,0.281,24,0.011,30,0.016,31,0.016,32,1.942,34,1.626,35,2.234,39,4.227,41,3.204,43,2.603,44,1.895,45,1.626,47,2.833,48,3.11,49,2.264,50,1.414,53,2.063,66,3.552,75,0.65,79,3.467,104,2.853,105,3.366,106,2.853,107,2.853,108,3.774,109,3.366,110,3.11,111,3.366,112,2.264,113,3.366,114,3.366,115,3.366,116,2.516,117,2.853,118,1.323,119,2.833,120,2.516,121,3.456,122,3.366,123,2.853,124,2.516,125,2.516,126,1.895,127,3.366,128,3.366,129,3.366,130,3.366,131,2.853]],["title/injectables/AuthService.html",[58,1.054,79,1.951]],["body/injectables/AuthService.html",[3,0.21,4,0.187,5,0.187,7,0.233,8,0.885,12,0.025,14,0.808,16,0.829,17,0.753,19,1.212,20,0.632,23,0.21,24,0.009,26,1.216,27,0.943,30,0.013,31,0.013,50,1.057,58,1.141,59,1.216,68,2.905,69,2.806,70,3.182,71,3.262,74,1.128,75,0.866,76,0.55,77,1.058,78,2.59,79,2.113,84,2.133,92,1.417,96,1.653,99,1.382,102,2.997,116,1.881,118,2.388,120,1.881,132,2.133,133,3.753,134,1.296,135,2.133,136,3.72,137,5.785,138,2.603,139,2.516,140,3.182,141,3.753,142,2.802,143,2.516,144,2.516,145,1.693,146,1.542,147,2.806,148,1.417,149,1.881,150,2.113,151,2.133,152,1.881,153,0.989,154,2.133,155,2.527,156,3.753,157,2.516,158,2.516,159,1.216,160,2.113,161,2.516,162,2.516,163,2.516,164,2.516,165,2.133,166,1.881,167,1.764,168,2.516,169,2.516,170,2.516,171,2.516,172,2.516,173,2.133,174,2.133,175,1.542,176,1.764,177,2.133,178,2.336,179,3.182,180,1.542,181,1.417,182,1.693,183,2.133,184,2.133,185,1.813,186,2.133,187,1.475,188,2.133,189,1.881,190,3.753,191,2.133,192,2.516,193,2.516,194,2.516,195,2.516,196,2.516,197,2.516]],["title/classes/Authorization.html",[24,0.012,198,2.59]],["body/classes/Authorization.html",[3,0.329,4,0.293,5,0.293,7,0.365,8,1.211,12,0.025,14,0.709,16,0.869,17,0.958,19,1.103,23,0.329,24,0.013,30,0.018,31,0.018,74,0.99,75,0.76,76,0.483,77,0.928,96,2.105,99,1.45,145,2.649,146,2.414,150,3.411,159,1.903,160,2.218,181,2.892,187,2.019,198,3.84,199,1.198,200,3.339,201,5.717,202,5.137,203,5.137,204,6.058,205,3.939,206,3.339,207,3.339,208,1.891,209,1.772,210,3.339,211,3.939,212,3.939,213,3.939,214,5.137,215,3.939]],["title/classes/BaseError.html",[24,0.012,216,1.559]],["body/classes/BaseError.html",[3,0.222,4,0.198,5,0.198,7,0.247,8,0.922,12,0.025,14,0.921,16,0.587,17,0.857,23,0.491,24,0.02,27,0.669,30,0.014,31,0.014,74,0.669,75,1.052,76,0.569,77,0.627,91,1.351,134,1.351,153,1.538,199,0.809,208,1.44,209,2.087,216,2.719,217,1.286,218,2.375,219,2.845,220,1.048,221,3.144,222,2.845,223,2.661,224,2.661,225,2.979,226,2.894,227,3.912,228,2.661,229,2.661,230,1.286,231,2.087,232,2.414,233,1.385,234,1.385,235,1.385,236,2.036,237,2.036,238,1.385,239,2.036,240,1.644,241,2.965,242,2.036,243,2.965,244,1.385,245,1.286,246,1.385,247,1.385,248,1.286,249,1.385,250,1.385,251,1.118,252,1.286,253,1.385,254,1.76,255,1.385,256,1.385,257,1.385]],["title/injectables/CaslAbilityFactory.html",[58,1.054,258,1.803]],["body/injectables/CaslAbilityFactory.html",[3,0.287,4,0.256,5,0.256,7,0.319,8,1.105,12,0.025,14,0.619,16,0.758,19,1.196,20,0.864,23,0.391,24,0.012,27,0.864,30,0.016,31,0.016,58,1.426,59,1.66,74,0.864,75,0.663,76,0.703,77,0.81,96,1.265,99,1.265,118,2.435,145,2.311,146,2.105,176,1.35,187,1.35,199,1.045,210,2.913,248,2.265,258,2.44,259,2.874,260,2.568,261,4.689,262,4.689,263,3.436,264,3.591,265,4.689,266,4.689,267,4.689,268,3.975,269,2.913,270,2.311,271,2.568,272,3.436,273,3.436,274,2.913,275,2.913,276,4.689,277,3.436,278,3.436,279,3.436,280,3.99,281,3.436,282,4.689,283,3.436,284,3.436,285,2.568,286,3.436,287,3.436,288,3.436,289,3.436,290,3.436,291,3.436,292,3.436]],["title/modules/CaslModule.html",[32,1.456,40,1.803]],["body/modules/CaslModule.html",[3,0.366,4,0.326,5,0.326,12,0.024,19,1.062,20,1.103,23,0.366,24,0.015,30,0.019,31,0.019,32,2.312,34,2.119,35,2.659,40,3.5,43,3.099,44,2.47,45,2.119,47,3.373,110,3.702,258,3.635,293,3.719,294,3.719,295,3.719,296,4.387,297,4.387,298,3.279]],["title/classes/HttpExceptionFilter.html",[24,0.012,299,2.59]],["body/classes/HttpExceptionFilter.html",[3,0.258,4,0.23,5,0.23,7,0.287,8,1.028,12,0.025,14,0.785,16,0.963,19,0.975,20,0.778,23,0.258,24,0.011,30,0.015,31,0.015,74,1.096,75,0.975,76,0.535,77,1.028,96,2.269,99,1.14,145,2.082,146,1.897,155,2.844,189,4.322,199,0.941,207,3.698,209,1.393,219,2.107,222,2.107,226,2.273,251,1.833,252,1.495,299,3.261,300,4.282,301,2.624,302,4.362,303,5.051,304,5.484,305,4.362,306,4.362,307,5.484,308,4.282,309,5.484,310,3.096,311,3.096,312,4.362,313,3.096,314,3.096,315,2.624,316,4.362,317,2.624,318,3.096,319,3.096,320,3.096,321,3.096,322,3.096,323,3.096,324,3.096,325,3.096,326,3.096,327,3.096,328,3.096,329,3.096,330,3.096,331,3.096,332,3.096,333,3.096,334,3.096,335,4.362,336,4.362,337,4.362,338,3.096,339,3.096,340,3.096,341,2.082,342,3.096,343,3.096,344,3.096,345,3.096,346,3.096]],["title/interfaces/IConfig.html",[347,1.803,348,2.33]],["body/interfaces/IConfig.html",[3,0.359,4,0.32,5,0.32,7,0.399,12,0.024,17,1.168,23,0.359,30,0.019,31,0.019,76,0.792,220,1.457,225,2.88,308,5.31,347,2.24,348,3.658,349,2.896,350,3.65,351,5.31,352,5.31,353,6.263,354,6.263]],["title/interfaces/JWTPayload.html",[150,1.951,347,1.803]],["body/interfaces/JWTPayload.html",[3,0.359,4,0.32,5,0.32,7,0.399,12,0.024,17,1.181,23,0.359,30,0.019,31,0.019,76,0.792,150,3.062,167,2.462,178,3.259,185,3.026,187,2.462,191,5.31,220,1.457,347,2.24,349,2.896,355,3.65]],["title/injectables/JwtAuthGuard.html",[58,1.054,356,2.123]],["body/injectables/JwtAuthGuard.html",[3,0.413,4,0.368,5,0.368,12,0.024,19,1.144,20,1.244,23,0.413,24,0.017,30,0.021,31,0.021,58,1.802,59,2.391,112,3.329,218,1.945,356,3.632,357,3.7,358,4.196,359,4.95,360,4.95]],["title/injectables/JwtStrategy.html",[58,1.054,108,2.123]],["body/injectables/JwtStrategy.html",[3,0.275,4,0.245,5,0.245,7,0.306,8,1.075,12,0.025,14,0.821,16,0.728,19,1.181,20,0.829,23,0.275,24,0.011,25,2.466,27,0.829,30,0.016,31,0.016,53,2.021,58,1.386,59,1.594,68,2.719,74,1.146,75,0.88,76,0.559,77,1.075,78,2.373,92,1.857,96,1.214,99,1.924,102,1.857,108,2.794,112,2.219,117,2.796,121,2.466,131,2.796,134,1.139,138,2.754,152,2.466,153,1.296,159,2.525,160,2.942,173,4.43,174,2.796,175,2.021,176,2.216,177,2.796,180,2.021,182,2.219,189,3.408,218,1.296,357,3.906,361,2.796,362,4.56,363,3.299,364,3.299,365,4.56,366,5.226,367,3.299,368,3.299,369,3.299,370,2.796,371,3.299,372,3.299,373,3.299,374,3.299,375,3.299,376,3.299,377,3.299,378,2.466,379,3.299,380,2.796,381,3.299,382,3.299]],["title/classes/LoginDto.html",[24,0.012,71,2.123]],["body/classes/LoginDto.html",[3,0.37,4,0.33,5,0.33,7,0.412,11,2.678,12,0.024,14,0.998,17,1.061,19,0.856,23,0.37,24,0.015,26,3.211,30,0.019,31,0.019,71,3.397,76,0.679,83,2.498,142,3.404,167,2.376,199,1.349,220,1.485,383,3.762,384,5.525,385,4.437,386,4.437]],["title/classes/MethodNotImplementedError.html",[24,0.012,254,1.559]],["body/classes/MethodNotImplementedError.html",[3,0.225,4,0.201,5,0.201,7,0.25,8,0.931,12,0.025,14,0.927,16,0.596,17,0.663,23,0.494,24,0.02,27,0.678,30,0.014,31,0.014,74,0.678,75,0.903,76,0.573,77,0.636,91,1.364,134,1.364,153,1.553,199,0.82,208,1.455,209,2.104,216,2.869,217,1.304,218,2.384,219,2.766,220,1.059,221,3.078,222,2.647,223,2.679,225,2.647,226,2.869,230,1.304,231,2.104,232,2.434,233,1.404,234,1.404,235,1.404,236,2.057,237,2.057,238,1.404,239,2.057,240,1.66,241,3.078,242,2.057,243,2.98,244,1.404,245,1.304,246,1.404,247,1.404,248,1.304,249,1.404,250,1.404,251,1.134,252,1.304,253,1.404,254,2.104,255,1.404,256,1.404,257,1.404,387,2.698,388,2.633,389,1.519,390,1.519,391,1.519]],["title/classes/NotFoundError.html",[24,0.012,240,1.456]],["body/classes/NotFoundError.html",[3,0.225,4,0.201,5,0.201,7,0.25,8,0.931,12,0.025,14,0.927,16,0.596,17,0.663,23,0.494,24,0.02,27,0.678,30,0.014,31,0.014,74,0.678,75,0.903,76,0.573,77,0.636,91,1.364,134,1.364,153,1.553,199,0.82,208,1.455,209,2.104,216,2.869,217,1.304,218,2.384,219,2.766,220,1.059,221,3.078,222,2.647,223,2.679,225,2.647,226,2.869,230,1.304,231,2.104,232,2.434,233,1.404,234,1.404,235,1.404,236,2.057,237,2.057,238,1.404,239,2.057,240,1.965,241,3.078,242,2.057,243,2.98,244,1.404,245,1.304,246,1.404,247,1.404,248,1.304,249,1.404,250,1.404,251,1.134,252,1.304,253,1.404,254,1.778,255,1.404,256,1.404,257,1.404,388,2.633,389,1.519,390,1.519,391,1.519,392,2.698]],["title/classes/Session.html",[24,0.012,176,1.362]],["body/classes/Session.html",[3,0.265,4,0.236,5,0.236,7,0.294,11,2.92,12,0.025,14,1.088,17,1.061,19,0.988,23,0.37,24,0.011,30,0.015,31,0.015,50,1.333,76,0.789,96,1.168,118,1.247,120,2.371,125,2.371,126,2.498,148,1.786,159,2.144,167,2.011,175,3.136,176,1.744,178,2.885,180,3.136,181,3.285,185,2.472,187,2.011,199,0.964,218,1.744,220,1.189,393,2.371,394,4.339,395,4.143,396,4.339,397,4.699,398,3.728,399,3.172,400,5.525,401,3.172,402,3.172,403,3.172,404,4.437,405,2.985,406,3.172,407,3.172,408,2.689,409,2.689,410,2.689,411,3.172,412,3.762,413,2.133,414,2.689,415,3.172,416,2.689]],["title/controllers/SessionController.html",[0,1.559,417,2.33]],["body/controllers/SessionController.html",[0,1.408,2,1.408,3,0.261,4,0.233,5,0.233,7,0.29,8,1.036,11,1.512,12,0.025,14,0.563,16,0.691,17,0.525,19,1.254,20,0.786,23,0.261,24,0.011,26,1.512,27,0.786,30,0.015,31,0.015,68,2.644,74,0.786,75,0.604,76,0.623,77,0.737,78,2.287,81,4.339,82,2.339,83,1.762,85,1.918,86,2.339,87,1.918,88,2.339,91,1.08,92,1.762,96,1.152,99,1.618,100,2.339,102,1.762,126,1.762,134,1.08,138,2.286,155,2.475,160,1.762,167,1.997,176,1.727,208,1.618,251,1.847,258,2.644,259,1.918,264,2.105,270,2.105,271,2.339,298,2.339,356,1.918,405,2.105,417,2.956,418,2.653,419,4.307,420,3.129,421,4.395,422,3.129,423,3.129,424,3.129,425,3.726,426,2.653,427,2.653,428,3.726,429,4.395,430,2.653,431,2.653,432,2.653,433,2.339,434,3.129,435,3.129,436,3.129,437,3.129,438,2.653,439,3.129,440,3.129,441,3.129,442,2.653,443,2.653,444,3.129]],["title/modules/SessionModule.html",[32,1.456,41,1.803]],["body/modules/SessionModule.html",[2,2.246,3,0.315,4,0.281,5,0.281,12,0.025,19,1.229,20,0.948,23,0.315,24,0.013,30,0.017,31,0.017,32,2.098,34,1.822,35,2.412,40,3.313,41,3.472,43,2.811,44,2.124,45,1.822,47,3.06,48,3.358,49,2.537,50,1.585,75,0.728,110,3.358,124,2.819,126,2.124,138,3.076,176,1.482,413,3.358,417,3.764,430,3.198,433,2.819,445,3.198,446,3.772,447,3.198,448,3.198,449,3.772,450,3.198,451,3.772,452,3.772]],["title/interfaces/SessionPayload.html",[347,1.803,453,2.33]],["body/interfaces/SessionPayload.html",[3,0.343,4,0.306,5,0.306,7,0.381,12,0.024,17,1.16,23,0.343,30,0.018,31,0.018,76,0.799,77,1.45,167,2.419,175,3.772,178,3.203,180,3.772,185,2.973,187,2.419,220,1.414,347,2.137,349,2.762,395,4.871,453,3.55,454,3.481]],["title/injectables/SessionService.html",[58,1.054,138,1.559]],["body/injectables/SessionService.html",[3,0.22,4,0.197,5,0.197,7,0.245,8,0.917,12,0.025,14,0.978,16,1.125,17,0.953,19,1.134,20,0.664,23,0.22,24,0.009,27,1.281,30,0.014,31,0.014,50,1.11,58,1.184,59,1.277,68,3.342,74,1.366,75,1.049,76,0.666,77,1.28,78,2.958,96,0.973,99,1.433,134,1.344,136,3.81,138,1.751,148,2.602,149,1.976,155,1.488,159,1.277,166,2.91,167,1.53,176,1.816,178,2.026,180,2.385,181,1.488,182,3.655,398,1.778,419,3.3,433,1.976,453,3.429,455,2.241,456,3.108,457,3.892,458,2.643,459,2.643,460,3.892,461,2.643,462,5.113,463,5.684,464,2.643,465,1.976,466,3.892,467,3.892,468,2.643,469,2.643,470,3.3,471,3.81,472,2.643,473,2.241,474,3.892,475,2.643,476,2.643,477,2.643,478,2.643,479,2.643,480,2.643,481,2.643,482,2.643,483,2.643,484,2.643,485,2.643,486,2.643,487,2.643]],["title/classes/UnauthenticatedError.html",[24,0.012,153,1.362]],["body/classes/UnauthenticatedError.html",[3,0.225,4,0.201,5,0.201,7,0.25,8,0.931,12,0.025,14,0.927,16,0.596,17,0.663,23,0.494,24,0.02,27,0.678,30,0.014,31,0.014,74,0.678,75,0.903,76,0.573,77,0.636,91,1.364,134,1.364,153,1.838,199,0.82,208,1.455,209,2.104,216,2.869,217,1.304,218,2.384,219,2.766,220,1.059,221,3.078,222,2.647,223,2.679,225,2.647,226,2.869,230,1.304,231,2.104,232,2.434,233,1.404,234,1.404,235,1.404,236,2.057,237,2.057,238,1.404,239,2.057,240,1.66,241,3.078,242,2.057,243,2.98,244,1.404,245,1.304,246,1.404,247,1.404,248,1.304,249,1.404,250,1.404,251,1.134,252,1.304,253,1.404,254,1.778,255,1.404,256,1.404,257,1.404,388,2.633,389,1.519,390,1.519,391,1.519,488,2.698]],["title/classes/UnauthorizedError.html",[24,0.012,208,1.276]],["body/classes/UnauthorizedError.html",[3,0.225,4,0.201,5,0.201,7,0.25,8,0.931,12,0.025,14,0.927,16,0.596,17,0.663,23,0.494,24,0.02,27,0.678,30,0.014,31,0.014,74,0.678,75,0.903,76,0.573,77,0.636,91,1.364,134,1.364,153,1.553,199,0.82,208,1.722,209,2.104,216,2.869,217,1.304,218,2.384,219,2.766,220,1.059,221,3.078,222,2.647,223,2.679,225,2.647,226,2.869,230,1.304,231,2.104,232,2.434,233,1.404,234,1.404,235,1.404,236,2.057,237,2.057,238,1.404,239,2.057,240,1.66,241,3.078,242,2.057,243,2.98,244,1.404,245,1.304,246,1.404,247,1.404,248,1.304,249,1.404,250,1.404,251,1.134,252,1.304,253,1.404,254,1.778,255,1.404,256,1.404,257,1.404,388,2.633,389,1.519,390,1.519,391,1.519,489,2.698]],["title/classes/UnexpectedError.html",[24,0.012,231,1.559]],["body/classes/UnexpectedError.html",[3,0.225,4,0.201,5,0.201,7,0.25,8,0.931,12,0.025,14,0.927,16,0.596,17,0.663,23,0.494,24,0.02,27,0.678,30,0.014,31,0.014,74,0.678,75,0.903,76,0.573,77,0.636,91,1.364,134,1.364,153,1.553,199,0.82,208,1.455,209,2.104,216,2.869,217,1.304,218,2.384,219,2.766,220,1.059,221,3.078,222,2.647,223,2.679,225,2.647,226,2.869,230,1.304,231,2.316,232,2.434,233,1.404,234,1.404,235,1.404,236,2.057,237,2.057,238,1.404,239,2.057,240,1.66,241,3.078,242,2.057,243,2.98,244,1.404,245,1.304,246,1.404,247,1.404,248,1.304,249,1.404,250,1.404,251,1.134,252,1.304,253,1.404,254,1.778,255,1.404,256,1.404,257,1.404,388,2.633,389,1.519,390,1.519,391,1.519,490,2.698]],["title/classes/User.html",[24,0.012,118,1.362]],["body/classes/User.html",[3,0.277,4,0.247,5,0.247,7,0.308,11,2.864,12,0.025,14,1.068,17,1.073,19,0.884,23,0.382,24,0.011,27,0.834,30,0.016,31,0.016,50,1.394,76,0.751,96,1.685,118,1.799,119,2.033,126,2.577,142,2.951,148,1.868,159,2.212,167,2.221,175,3.212,181,3.338,185,2.532,187,2.06,199,1.009,218,1.799,220,1.226,394,4.444,395,3.422,396,2.812,397,2.812,398,3.079,400,5.427,408,2.812,409,2.812,410,2.812,412,2.812,416,2.812,491,2.48,492,3.317,493,3.317,494,3.317,495,3.317,496,3.317,497,3.317,498,3.317,499,3.317,500,3.317,501,2.812,502,3.317,503,2.812,504,4.578,505,3.317,506,2.231,507,3.317,508,3.317]],["title/controllers/UsersController.html",[0,1.559,509,2.33]],["body/controllers/UsersController.html",[0,1.029,2,1.029,3,0.191,4,0.17,5,0.17,7,0.212,8,0.823,11,2.291,12,0.025,14,0.854,16,1.047,17,0.903,19,1.216,20,0.575,23,0.191,24,0.008,26,1.105,27,1.192,30,0.012,31,0.012,45,1.687,68,3.24,72,3.592,74,1.192,75,0.915,76,0.581,77,1.117,78,3.005,81,1.71,82,1.71,83,1.288,85,1.402,86,1.71,87,1.402,88,1.71,91,0.79,92,1.288,96,1.88,97,2.961,99,1.746,100,1.71,102,2.67,118,1.864,134,0.79,148,1.288,155,1.967,160,2.67,178,2.914,208,1.746,251,0.961,258,2.205,259,1.402,264,2.85,270,1.539,271,1.71,298,1.71,315,1.939,356,1.402,378,1.71,425,4.564,426,1.939,427,1.939,428,4.02,431,1.939,432,1.939,438,3.592,442,3.592,443,1.939,456,2.349,471,2.611,506,2.85,509,2.349,510,1.939,511,2.961,512,1.939,513,2.906,514,2.288,515,2.961,516,2.288,517,2.288,518,2.288,519,2.288,520,2.288,521,2.288,522,2.288,523,2.288,524,2.288,525,2.288,526,2.288,527,1.939,528,1.71,529,1.967,530,1.939,531,1.71,532,2.288,533,2.288,534,2.288,535,2.288,536,2.288,537,2.288,538,2.288,539,2.288,540,2.288,541,2.288,542,2.288,543,2.288,544,2.288,545,3.493,546,2.288,547,2.288,548,2.288,549,2.288,550,2.288,551,2.288,552,2.288,553,2.288]],["title/classes/UsersDto.html",[24,0.012,513,2.123]],["body/classes/UsersDto.html",[3,0.325,4,0.29,5,0.29,7,0.362,11,2.915,12,0.024,14,1.087,17,1.113,19,0.753,23,0.325,24,0.013,26,3.319,30,0.018,31,0.018,76,0.74,83,2.195,142,3.203,159,2.465,167,2.236,185,2.748,187,2.236,199,1.186,220,1.367,384,5.63,405,2.622,513,3.127,554,3.305,555,3.899,556,3.899,557,3.899,558,3.899,559,3.899]],["title/modules/UsersModule.html",[32,1.456,42,2.123]],["body/modules/UsersModule.html",[2,2.185,3,0.302,4,0.269,5,0.269,12,0.025,19,1.241,20,0.909,23,0.302,24,0.012,30,0.017,31,0.017,32,2.04,34,1.748,35,2.346,40,3.274,41,3.274,42,4.133,43,2.734,44,2.037,45,1.748,47,2.976,48,3.267,49,2.434,50,1.52,75,0.698,110,3.267,118,1.422,119,2.976,123,3.068,124,2.705,125,2.705,126,2.037,450,3.068,509,3.687,528,2.705,529,3.825,530,3.068,560,3.068,561,3.068,562,3.068,563,3.618,564,3.618,565,3.618]],["title/injectables/UsersService.html",[58,1.054,529,1.951]],["body/injectables/UsersService.html",[3,0.176,4,0.157,5,0.157,7,0.196,8,0.773,12,0.025,14,0.886,16,1.003,17,0.675,19,1.14,20,0.53,23,0.176,24,0.007,26,1.584,27,1.237,30,0.011,31,0.011,45,1.584,50,0.886,58,0.997,59,1.018,68,3.179,74,1.237,75,0.95,76,0.603,77,1.16,78,2.927,91,1.132,92,1.187,96,1.918,99,1.482,102,3.486,118,2.138,134,1.132,135,1.787,136,3.395,138,2.447,140,2.781,142,1.847,147,2.452,148,2.267,149,1.576,150,2.557,151,1.787,152,1.576,154,1.787,155,2.267,160,1.847,165,1.787,166,2.452,167,1.582,176,1.785,178,2.095,179,1.787,182,2.206,183,1.787,184,1.787,185,1.018,186,1.787,187,0.829,188,1.787,206,1.787,226,1.476,240,0.886,245,1.018,378,1.576,380,1.787,456,2.206,462,4.172,470,2.781,471,3.678,473,2.781,506,2.206,511,2.781,512,2.781,513,2.783,515,2.781,527,1.787,528,1.576,529,1.847,566,1.787,567,4.026,568,4.026,569,2.108,570,2.108,571,3.28,572,2.108,573,2.108,574,3.28,575,2.108,576,3.28,577,2.108,578,3.28,579,2.108,580,2.108,581,3.28,582,3.28,583,2.108,584,2.108,585,2.108,586,3.28,587,2.108,588,2.108,589,2.108,590,3.28,591,2.108,592,3.28,593,2.108,594,2.108,595,2.108,596,4.026,597,2.108,598,2.108]],["title/classes/ValidationError.html",[24,0.012,91,1.196]],["body/classes/ValidationError.html",[3,0.22,4,0.197,5,0.197,7,0.245,8,0.917,12,0.025,14,0.978,16,0.583,17,0.652,23,0.49,24,0.02,27,0.664,30,0.014,31,0.014,74,0.664,75,0.892,76,0.625,77,0.623,91,1.595,134,1.344,153,1.53,199,0.804,208,1.433,209,2.644,216,2.856,217,1.277,218,2.37,219,2.746,220,1.043,221,3.058,222,2.625,223,2.653,225,2.625,226,2.856,230,1.277,231,2.079,232,2.404,233,1.375,234,1.375,235,1.375,236,2.026,237,2.026,238,1.375,239,2.026,240,1.635,241,3.058,242,2.026,243,2.958,244,1.375,245,1.277,246,1.375,247,1.375,248,1.277,249,1.375,250,1.375,251,1.11,252,1.277,253,1.375,254,1.751,255,1.375,256,1.375,257,1.375,388,2.602,389,1.488,390,1.488,391,1.488,599,3.892,600,2.643]],["title/coverage.html",[601,3.525]],["body/coverage.html",[0,2.162,1,1.579,5,0.175,6,1.99,12,0.025,21,1.322,24,0.022,30,0.012,31,0.012,53,1.439,58,1.718,60,1.99,66,1.579,67,1.99,71,1.439,76,0.288,79,1.322,85,1.439,87,1.439,89,1.755,91,0.811,99,0.864,108,1.439,118,0.923,119,2.183,132,1.99,138,1.056,150,1.322,153,0.923,176,0.923,187,0.923,198,1.755,200,1.99,208,0.864,216,1.056,217,2.73,230,3.404,231,1.056,240,0.986,254,1.056,258,1.222,259,1.439,260,1.755,299,1.755,300,1.99,301,1.99,341,2.396,347,2.24,348,1.579,350,1.99,355,1.99,356,1.439,357,2.663,358,1.99,361,1.99,383,1.99,393,2.663,413,1.579,417,1.579,418,1.99,453,1.579,454,1.99,455,1.99,491,2.663,503,3.02,509,1.579,510,1.99,513,1.439,529,1.322,531,1.755,554,1.99,566,1.99,601,1.755,602,2.348,603,2.348,604,2.348,605,5.167,606,4.806,607,2.663,608,6.51,609,6.634,610,1.99,611,5.822,612,5.439,613,1.99,614,1.99,615,1.99,616,1.99,617,1.99,618,2.348,619,3.65,620,1.99,621,3.563,622,3.65,623,3.65,624,1.99,625,1.99,626,1.99,627,1.99,628,1.99,629,2.348,630,2.348]],["title/dependencies.html",[35,2.011,631,2.458]],["body/dependencies.html",[12,0.025,20,1.09,30,0.019,31,0.019,35,2.095,50,1.822,83,2.442,112,2.917,116,3.242,121,3.242,146,2.658,147,3.242,269,3.677,317,4.633,341,2.917,370,3.677,632,4.337,633,5.983,634,4.337,635,4.337,636,4.337,637,4.337,638,4.337,639,4.337,640,4.337,641,4.337,642,4.337,643,4.337,644,4.337,645,4.337,646,4.337,647,4.337,648,4.337,649,4.337,650,4.337,651,4.337,652,4.337,653,4.337,654,4.337,655,4.337]],["title/miscellaneous/enumerations.html",[656,1.401,657,3.53]],["body/miscellaneous/enumerations.html",[7,0.453,12,0.024,30,0.02,31,0.02,270,3.956,280,4.396,285,4.396,456,3.956,465,5.007,506,3.956,607,3.653,656,2.361,657,4.143,658,4.143,659,5.881]],["title/miscellaneous/functions.html",[656,1.401,660,3.53]],["body/miscellaneous/functions.html",[7,0.459,12,0.023,16,1.093,17,1.063,30,0.021,31,0.021,74,1.244,75,0.955,76,0.607,77,1.166,87,3.632,626,4.196,627,5.378,628,4.196,656,2.391,660,4.196,661,4.95,662,4.196,663,4.95,664,4.95]],["title/index.html",[7,0.269,665,2.9,666,2.9]],["body/index.html",[4,0.282,12,0.024,30,0.017,31,0.017,280,2.829,285,2.829,601,2.829,667,3.784,668,3.784,669,5.004,670,3.784,671,3.784,672,3.784,673,3.784,674,3.784,675,3.784,676,3.208,677,5.606,678,3.784,679,3.784,680,3.784,681,3.784,682,6.5,683,3.784,684,3.784,685,3.208,686,6.373,687,3.784,688,3.784,689,5.004,690,3.784,691,3.208,692,3.784,693,3.784,694,5.004,695,5.004,696,3.784,697,3.784,698,3.784,699,5.004,700,5.004,701,3.784,702,3.784,703,3.784,704,3.784,705,3.784,706,3.208,707,3.784,708,3.784,709,3.784,710,3.784,711,3.784,712,3.784,713,3.784,714,3.784,715,3.784,716,3.208,717,3.784,718,3.784,719,3.784,720,3.784,721,3.784,722,3.784,723,3.208,724,3.784,725,3.208,726,3.784]],["title/modules.html",[34,2.278]],["body/modules.html",[12,0.021,30,0.021,31,0.021,33,3.301,34,2.371,39,3.008,40,2.554,41,2.554,42,3.008,706,5.685,727,6.706,728,6.706,729,6.706]],["title/overview.html",[730,3.998]],["body/overview.html",[2,1.514,12,0.024,21,2.974,30,0.016,31,0.016,33,4.516,34,1.626,35,2.234,36,2.853,37,2.853,38,2.853,39,4.169,40,3.343,41,3.432,42,4.042,43,2.603,44,1.895,45,1.626,59,1.626,79,2.974,104,2.853,106,2.853,107,2.853,108,3.237,138,2.838,199,1.023,258,3.282,293,2.853,294,2.853,295,2.853,349,2.264,445,2.853,447,2.853,448,2.853,529,3.551,560,2.853,561,2.853,562,2.853,730,2.853,731,3.366,732,3.366,733,3.366,734,3.366,735,3.366]],["title/properties.html",[220,1.115,631,2.458]],["body/properties.html",[12,0.024,30,0.021,31,0.021,220,1.404,676,4.444,716,4.444,723,4.444,736,5.242,737,5.242,738,5.242]],["title/miscellaneous/typealiases.html",[656,1.401,739,4.164]],["body/miscellaneous/typealiases.html",[7,0.473,12,0.022,30,0.021,31,0.021,76,0.625,259,3.127,260,4.803,264,3.432,268,4.326,274,5.116,275,5.116,656,2.465,740,5.103,741,6.035]],["title/miscellaneous/variables.html",[656,1.401,742,3.53]],["body/miscellaneous/variables.html",[7,0.219,12,0.025,17,0.913,30,0.012,31,0.012,53,2.19,69,1.762,75,0.93,76,0.804,85,2.19,89,2.671,99,1.316,118,1.405,119,2.951,142,2.914,159,2.085,167,2.224,176,0.927,181,2.012,185,1.726,187,1.893,220,0.957,341,3.239,348,1.586,351,1.999,352,1.999,393,1.762,398,4.382,405,2.404,413,2.404,414,1.999,465,4.87,491,1.762,501,1.999,531,2.671,607,1.762,610,3.659,613,1.999,614,3.03,615,1.999,616,1.999,617,3.03,619,1.999,620,3.03,622,1.999,623,1.999,624,3.03,625,3.03,656,1.139,658,3.03,662,3.659,685,3.03,691,1.999,725,3.659,742,1.999,743,4.316,744,4.316,745,2.357,746,2.357,747,2.357,748,2.357,749,2.357,750,3.574,751,5.829,752,3.574,753,3.574,754,4.316,755,3.574,756,2.357,757,2.357,758,2.357,759,2.357,760,2.357,761,2.357,762,2.357,763,2.357,764,2.357,765,2.357,766,2.357,767,2.357,768,2.357,769,2.357,770,2.357,771,3.574,772,2.357,773,2.357,774,2.357,775,2.357,776,3.574,777,3.574,778,2.357,779,4.316,780,3.574,781,3.574]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":230,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["0.0.1",{"_index":737,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":416,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["10",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["13",{"_index":734,"title":{},"body":{"overview.html":{}}}],["16.0.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":735,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":732,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":252,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["401",{"_index":249,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["403",{"_index":246,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["404",{"_index":242,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["5",{"_index":731,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["5.4.4",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":232,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["7",{"_index":733,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["8.11.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{}}}],["_.get(err",{"_index":337,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_.get(token",{"_index":211,"title":{},"body":{"classes/Authorization.html":{}}}],["_.includes(user.roles",{"_index":277,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["_.intersection(roles",{"_index":213,"title":{},"body":{"classes/Authorization.html":{}}}],["_.omit(user.tojson",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["_id",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ability",{"_index":264,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(action.delete",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.read",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.update",{"_index":443,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory",{"_index":298,"title":{},"body":{"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory.ts",{"_index":260,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:20",{"_index":263,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":265,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":266,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":248,"title":{},"body":{"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["access_token",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":480,"title":{},"body":{"injectables/SessionService.html":{}}}],["accesstoken.save",{"_index":482,"title":{},"body":{"injectables/SessionService.html":{}}}],["account",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["action",{"_index":270,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["action.update",{"_index":284,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["add",{"_index":724,"title":{},"body":{"index.html":{}}}],["additionalproperties",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv",{"_index":341,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ajv(ajvoptions",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(loginschema",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(userschema",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajvoptions",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":740,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allerrors",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedroles",{"_index":204,"title":{},"body":{"classes/Authorization.html":{}}}],["already",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":707,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":428,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get(':id",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@httpcode(httpstatus.no_content)@delete(':id",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@put('log",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":429,"title":{},"body":{"controllers/SessionController.html":{}}}],["apibody({schema",{"_index":422,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproperty",{"_index":384,"title":{},"body":{"classes/LoginDto.html":{},"classes/UsersDto.html":{}}}],["apiproperty({required",{"_index":558,"title":{},"body":{"classes/UsersDto.html":{}}}],["apitags",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apitags(capitalizeinitials(routes.auth.name",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(capitalizeinitials(routes.session.name",{"_index":434,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(capitalizeinitials(routes.users.name",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":684,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appability",{"_index":275,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":675,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":309,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(err.errors",{"_index":342,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth.dto",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":432,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":358,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.strategy",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:18",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.strategy.ts:9",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.validation",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/jwt",{"_index":431,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":244,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["authguard",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":360,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":716,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":198,"title":{"classes/Authorization.html":{}},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["authorize",{"_index":202,"title":{},"body":{"classes/Authorization.html":{}}}],["authorize(token",{"_index":203,"title":{},"body":{"classes/Authorization.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":708,"title":{},"body":{"index.html":{}}}],["bad",{"_index":250,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror",{"_index":216,"title":{"classes/BaseError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["baseerror:19",{"_index":391,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:2",{"_index":389,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:3",{"_index":390,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["bcrypt",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync(userdto.password",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["blocked",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["body.email",{"_index":440,"title":{},"body":{"controllers/SessionController.html":{}}}],["boolean",{"_index":395,"title":{},"body":{"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":729,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":727,"title":{},"body":{"modules.html":{}}}],["bson",{"_index":477,"title":{},"body":{"injectables/SessionService.html":{}}}],["build",{"_index":276,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["building",{"_index":670,"title":{},"body":{"index.html":{}}}],["can([action.read",{"_index":283,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.manage",{"_index":279,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["capitalizeinitials",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalizeinitials(str",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["casl",{"_index":297,"title":{},"body":{"modules/CaslModule.html":{}}}],["casl/ability",{"_index":269,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["caslabilityfactory",{"_index":258,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":40,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":306,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":24,"title":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":293,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":294,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":295,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":445,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":448,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":446,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":447,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":560,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":562,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":563,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":561,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":221,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["comparepassword",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(user",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["components/auth/auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["components/auth/auth.service",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/sessions/session.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["components/users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["condition",{"_index":473,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["condition._id",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["conditions",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.jwt_secret",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["constructor(code",{"_index":224,"title":{},"body":{"classes/BaseError.html":{}}}],["constructor(message",{"_index":241,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(sessionmodel",{"_index":458,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usermodel",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(routes.auth.route",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(routes.session.route",{"_index":435,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(routes.users.route",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":601,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":456,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(data",{"_index":461,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(userdto",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createforuser",{"_index":261,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":262,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["ctx",{"_index":318,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":321,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":320,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currentenv",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":466,"title":{},"body":{"injectables/SessionService.html":{}}}],["date().toisostring",{"_index":332,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{}}}],["default",{"_index":398,"title":{},"body":{"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["delete",{"_index":506,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(@request",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(req",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(userid",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletemany",{"_index":457,"title":{},"body":{"injectables/SessionService.html":{}}}],["deletemany(userid",{"_index":467,"title":{},"body":{"injectables/SessionService.html":{}}}],["deleteresult",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":676,"title":{},"body":{"index.html":{},"properties.html":{}}}],["details",{"_index":289,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":287,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":290,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":685,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":394,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["documentation",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":696,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":671,"title":{},"body":{"index.html":{}}}],["email",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["endpoint",{"_index":726,"title":{},"body":{"index.html":{}}}],["enum",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":657,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envs",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envs[currentenv",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":314,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.errors",{"_index":344,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.status",{"_index":335,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error",{"_index":219,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors",{"_index":209,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors.0.instancepath",{"_index":338,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors.0.message",{"_index":339,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["everything",{"_index":282,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["example",{"_index":436,"title":{},"body":{"controllers/SessionController.html":{}}}],["exception",{"_index":311,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":310,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:33",{"_index":313,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":328,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":327,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.status",{"_index":324,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exists",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":317,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":218,"title":{},"body":{"classes/BaseError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/ValidationError.html":{}}}],["extractjwt",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":267,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":245,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["false",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":441,"title":{},"body":{"controllers/SessionController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["filterquery",{"_index":471,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["findone(condition",{"_index":470,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["format",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":669,"title":{},"body":{"index.html":{}}}],["function",{"_index":503,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":660,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('health",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get(@request",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(req",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":665,"title":{"index.html":{}},"body":{}}],["grow",{"_index":703,"title":{},"body":{"index.html":{}}}],["handle",{"_index":340,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hasaccess",{"_index":214,"title":{},"body":{"classes/Authorization.html":{}}}],["hello",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":713,"title":{},"body":{"index.html":{}}}],["host",{"_index":308,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{}}}],["host.switchtohttp",{"_index":319,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":307,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":299,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":286,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://nestjs.com",{"_index":720,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":315,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":325,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["iconfig",{"_index":348,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":323,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ignoreexpiration",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":256,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["implements",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":268,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["inherited",{"_index":388,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectconnection",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(session.name",{"_index":479,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmodel(user.name",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":681,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":683,"title":{},"body":{"index.html":{}}}],["instancepath",{"_index":336,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["interface",{"_index":347,"title":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":349,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"overview.html":{}}}],["internal",{"_index":233,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["intersectedroles",{"_index":212,"title":{},"body":{"classes/Authorization.html":{}}}],["intersectedroles.length",{"_index":215,"title":{},"body":{"classes/Authorization.html":{}}}],["ispasswordmatching",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalid",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["item",{"_index":291,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":292,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":710,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expires_in",{"_index":351,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":352,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":356,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":150,"title":{"interfaces/JWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"interfaces/JWTPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":108,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":717,"title":{},"body":{"index.html":{}}}],["license",{"_index":723,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":700,"title":{},"body":{"index.html":{}}}],["literal",{"_index":421,"title":{},"body":{"controllers/SessionController.html":{}}}],["lodash",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["log",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":71,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginschema",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logout(@request",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(req",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(token",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["manage",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["match",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":226,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["metadata",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":255,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["methodnotimplementederror",{"_index":254,"title":{"classes/MethodNotImplementedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["miscellaneous",{"_index":656,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":699,"title":{},"body":{"index.html":{}}}],["mode",{"_index":689,"title":{},"body":{"index.html":{}}}],["model",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo_uri",{"_index":353,"title":{},"body":{"interfaces/IConfig.html":{}}}],["mongoose",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mongoose.clientsession",{"_index":463,"title":{},"body":{"injectables/SessionService.html":{}}}],["mongoose.connection",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["mongoosemodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongo_uri",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":712,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":718,"title":{},"body":{"index.html":{}}}],["name",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":677,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":722,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"dependencies.html":{}}}],["new",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":668,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":240,"title":{"classes/NotFoundError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["notfounderror(`user",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":682,"title":{},"body":{"index.html":{}}}],["null",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":225,"title":{},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["obj",{"_index":504,"title":{},"body":{"classes/User.html":{}}}],["obj.password",{"_index":507,"title":{},"body":{"classes/User.html":{}}}],["object",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(roles",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":476,"title":{},"body":{"injectables/SessionService.html":{}}}],["objectid(userid",{"_index":487,"title":{},"body":{"injectables/SessionService.html":{}}}],["ok",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["one",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["open",{"_index":701,"title":{},"body":{"index.html":{}}}],["optional",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["overview",{"_index":730,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":631,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["parsevalidationerrors",{"_index":305,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsevalidationerrors(err",{"_index":312,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["passport",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":329,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["pattern",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{}}}],["payload.details",{"_index":343,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.message",{"_index":345,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.sessionid",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":711,"title":{},"body":{"index.html":{}}}],["port",{"_index":354,"title":{},"body":{"interfaces/IConfig.html":{}}}],["post",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_expires_in",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":691,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":667,"title":{},"body":{"index.html":{}}}],["project",{"_index":702,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":400,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({select",{"_index":495,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":396,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":493,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":220,"title":{"properties.html":{}},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":426,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["put('log",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('revoke",{"_index":439,"title":{},"body":{"controllers/SessionController.html":{}}}],["read",{"_index":280,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ref",{"_index":404,"title":{},"body":{"classes/Session.html":{}}}],["reflect",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["regex.name",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex.password",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":680,"title":{},"body":{"index.html":{}}}],["req",{"_index":425,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":251,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{}}}],["request.url",{"_index":330,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":405,"title":{},"body":{"classes/Session.html":{},"controllers/SessionController.html":{},"classes/UsersDto.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":316,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(payload",{"_index":334,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["results",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["revoked",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{}}}],["revokeuser",{"_index":419,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["revokeuser(email",{"_index":474,"title":{},"body":{"injectables/SessionService.html":{}}}],["revokeuser(req",{"_index":420,"title":{},"body":{"controllers/SessionController.html":{}}}],["rimraf",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["roles",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":278,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["roleslist",{"_index":610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":686,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["saved",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":672,"title":{},"body":{"index.html":{}}}],["schema",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":408,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(session",{"_index":414,"title":{},"body":{"classes/Session.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":501,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":409,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.boolean",{"_index":412,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.objectid",{"_index":411,"title":{},"body":{"classes/Session.html":{}}}],["secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":500,"title":{},"body":{"classes/User.html":{}}}],["select('+password",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":673,"title":{},"body":{"index.html":{}}}],["session",{"_index":176,"title":{"classes/Session.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session._id",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.blocked",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.controller",{"_index":451,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.email",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.interface",{"_index":478,"title":{},"body":{"injectables/SessionService.html":{}}}],["session.name",{"_index":452,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.revoked",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.roles",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.schema",{"_index":433,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session.service",{"_index":430,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.username",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessioncontroller",{"_index":417,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{}}}],["sessionmodel",{"_index":460,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionmodule",{"_index":41,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionpayload",{"_index":453,"title":{"interfaces/SessionPayload.html":{}},"body":{"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["sessions",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sessions/session.module",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["sessions/session.service",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["sessionschema",{"_index":413,"title":{},"body":{"classes/Session.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionschema.index",{"_index":415,"title":{},"body":{"classes/Session.html":{}}}],["sessionservice",{"_index":138,"title":{"injectables/SessionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":485,"title":{},"body":{"injectables/SessionService.html":{}}}],["side",{"_index":674,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"index.html":{}}}],["sponsors",{"_index":705,"title":{},"body":{"index.html":{}}}],["src/.../auth.validation.ts",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":741,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constant.ts",{"_index":658,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../regex.ts",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.schema.ts",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.schema.ts",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.validation.ts",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validator.ts",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["src/casl/casl",{"_index":259,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/casl/casl.module",{"_index":450,"title":{},"body":{"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["src/casl/casl.module.ts",{"_index":296,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/common/authorization.ts",{"_index":200,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/common/authorization.ts:6",{"_index":205,"title":{},"body":{"classes/Authorization.html":{}}}],["src/common/constant",{"_index":271,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/common/constant.ts",{"_index":607,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/common/errors.ts",{"_index":217,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["src/common/errors.ts:19",{"_index":229,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:2",{"_index":228,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:28",{"_index":392,"title":{},"body":{"classes/NotFoundError.html":{}}}],["src/common/errors.ts:3",{"_index":227,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:34",{"_index":488,"title":{},"body":{"classes/UnauthenticatedError.html":{}}}],["src/common/errors.ts:40",{"_index":489,"title":{},"body":{"classes/UnauthorizedError.html":{}}}],["src/common/errors.ts:47",{"_index":599,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/common/errors.ts:54",{"_index":387,"title":{},"body":{"classes/MethodNotImplementedError.html":{}}}],["src/common/errors.ts:60",{"_index":490,"title":{},"body":{"classes/UnexpectedError.html":{}}}],["src/common/regex.ts",{"_index":613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/routes",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/common/routes.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/types",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/common/types.ts",{"_index":355,"title":{},"body":{"interfaces/JWTPayload.html":{},"coverage.html":{}}}],["src/common/validator.ts",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/components/auth/auth.controller.ts:16",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/components/auth/auth.dto.ts",{"_index":383,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/components/auth/auth.dto.ts:5",{"_index":385,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.dto.ts:8",{"_index":386,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/components/auth/auth.service.ts",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/components/auth/auth.service.ts:14",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:31",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.validation.ts",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/jwt",{"_index":357,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts",{"_index":418,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts:28",{"_index":424,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/components/sessions/session.interface.ts",{"_index":454,"title":{},"body":{"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["src/components/sessions/session.module.ts",{"_index":449,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/components/sessions/session.schema",{"_index":273,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["src/components/sessions/session.schema.ts",{"_index":393,"title":{},"body":{"classes/Session.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/sessions/session.schema.ts:14",{"_index":406,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:17",{"_index":407,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:20",{"_index":401,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:23",{"_index":403,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:29",{"_index":402,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:35",{"_index":399,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.service.ts",{"_index":455,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/components/sessions/session.service.ts:11",{"_index":459,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:16",{"_index":464,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:24",{"_index":472,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:28",{"_index":475,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:35",{"_index":468,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/users/users.controller.ts",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/components/users/users.controller.ts:36",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:48",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:60",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:74",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.dto.ts",{"_index":554,"title":{},"body":{"classes/UsersDto.html":{},"coverage.html":{}}}],["src/components/users/users.dto.ts:11",{"_index":556,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:14",{"_index":557,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:5",{"_index":559,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:8",{"_index":555,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.module.ts",{"_index":564,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/components/users/users.schema",{"_index":272,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["src/components/users/users.schema.ts",{"_index":491,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/users.schema.ts:12",{"_index":494,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:15",{"_index":496,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:18",{"_index":497,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:24",{"_index":492,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:9",{"_index":498,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.service.ts",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/components/users/users.service.ts:13",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:20",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:50",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:58",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:62",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.validation.ts",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/config/config.interface.ts",{"_index":350,"title":{},"body":{"interfaces/IConfig.html":{},"coverage.html":{}}}],["src/config/index.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/filters/http",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["src/utils/index.ts",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["staging",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":687,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":690,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":692,"title":{},"body":{"index.html":{}}}],["started",{"_index":666,"title":{"index.html":{}},"body":{}}],["starter",{"_index":679,"title":{},"body":{"index.html":{}}}],["statements",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":201,"title":{},"body":{"classes/Authorization.html":{}}}],["status",{"_index":222,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["statuscode",{"_index":326,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":714,"title":{},"body":{"index.html":{}}}],["str",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategy",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":288,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":274,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(0",{"_index":243,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super(message",{"_index":235,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super_admin",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":706,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":728,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":695,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":698,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":697,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":437,"title":{},"body":{"controllers/SessionController.html":{}}}],["tests",{"_index":694,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":704,"title":{},"body":{"index.html":{}}}],["this.appservice.gethealth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(req.user",{"_index":442,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["this.code",{"_index":236,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.comparepassword(user",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.connection.startsession",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.errors",{"_index":253,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.jwtservice.sign(payload",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.message",{"_index":239,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.name",{"_index":237,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.parsevalidationerrors(exception",{"_index":333,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.sessionmodel(data",{"_index":481,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.deletemany",{"_index":486,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.findone(condition",{"_index":483,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.updateone",{"_index":484,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.create",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.sessionservice.deletemany(userid",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sessionservice.findone",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.sessionservice.revokeuser(body.email",{"_index":444,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.revokeuser(token.email",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.status",{"_index":238,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.toobject",{"_index":505,"title":{},"body":{"classes/User.html":{}}}],["this.usermodel",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.deleteone(condition",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone(condition",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(userdto",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.delete(userid",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(conditions",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.logout(req.user",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":331,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["tojson",{"_index":223,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["token",{"_index":206,"title":{},"body":{"classes/Authorization.html":{},"injectables/UsersService.html":{}}}],["tools",{"_index":234,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["touch",{"_index":715,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":462,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["transaction.endsession",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["transaction.withtransaction(async",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["true",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":322,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["twitter",{"_index":721,"title":{},"body":{"index.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":739,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":210,"title":{},"body":{"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{}}}],["typescript",{"_index":678,"title":{},"body":{"index.html":{}}}],["ui",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["unauthenticatederror",{"_index":153,"title":{"classes/UnauthenticatedError.html":{}},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unauthenticatederror('password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthenticatederror('user",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorized",{"_index":247,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unauthorizederror",{"_index":208,"title":{"classes/UnauthorizedError.html":{}},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["undefined",{"_index":397,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["undefined})@apibearerauth()@useguards(jwtauthguard)@put('revoke",{"_index":423,"title":{},"body":{"controllers/SessionController.html":{}}}],["unexpected",{"_index":257,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unexpectederror",{"_index":231,"title":{"classes/UnexpectedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unique",{"_index":499,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":693,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":469,"title":{},"body":{"injectables/SessionService.html":{}}}],["unlicensed",{"_index":738,"title":{},"body":{"properties.html":{}}}],["update",{"_index":285,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["updatedresult",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedresult.modifiedcount",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["usedefaults",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":427,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":438,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":118,"title":{"classes/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Session.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.blocked",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userdto",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":725,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":565,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.schema",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.validation",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.schema",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{}}}],["userschema",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.index",{"_index":508,"title":{},"body":{"classes/User.html":{}}}],["userschema.methods.tojson",{"_index":502,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":509,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdto",{"_index":513,"title":{"classes/UsersDto.html":{}},"body":{"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userservice",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":529,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatelogin",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validatelogin(logindto",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["validatelogin.errors",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateuser",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validateuser(userdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["validateuser.errors",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["validation",{"_index":346,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerror",{"_index":91,"title":{"classes/ValidationError.html":{}},"body":{"controllers/AuthController.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["validationerror(null",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["value",{"_index":465,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":742,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":736,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":410,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["void",{"_index":207,"title":{},"body":{"classes/Authorization.html":{},"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":688,"title":{},"body":{"index.html":{}}}],["website",{"_index":719,"title":{},"body":{"index.html":{}}}],["world",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":281,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["yes",{"_index":600,"title":{},"body":{"classes/ValidationError.html":{}}}],["you'd",{"_index":709,"title":{},"body":{"index.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z][^&<>*:\"~$%]{1,49",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  getHealth(): string {\n    return this.appService.getHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './components/users/users.module';\nimport { config } from './config';\nimport { AuthModule } from './components/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { SessionModule } from './components/sessions/session.module';\nimport { CaslModule } from './casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(config.mongo_uri),\n    UsersModule,\n    AuthModule,\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  getHealth(): string {\n    return 'OK';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Body } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LoginDto } from './auth.dto';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { validateLogin } from './auth.validation';\nimport { ValidationError } from 'src/common/errors';\n\n@ApiTags(capitalizeInitials(ROUTES.auth.name))\n@Controller(ROUTES.auth.route)\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  async login(@Body() loginDto: LoginDto): Promise {\n    const isValid = validateLogin(loginDto);\n    if (!isValid) {\n      new ValidationError(null, validateLogin.errors);\n    }\n    return await this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSessionModule\n\nSessionModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from '../../components/auth/auth.controller';\nimport { AuthService } from '../../components/auth/auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { config } from 'src/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/users.schema';\nimport { JwtStrategy } from './jwt-auth.strategy';\nimport { SessionModule } from '../sessions/session.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: config.jwt_secret,\n    }),\n    SessionModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(user: User, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './auth.dto';\nimport * as bcrypt from 'bcrypt';\nimport { Model } from 'mongoose';\nimport { User } from '../users/users.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { JWTPayload } from 'src/common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from 'src/common/errors';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private jwtService: JwtService,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async comparePassword(user: User, password: string): Promise {\n    if (user) {\n      const isPasswordMatching = await bcrypt.compare(password, user.password);\n      if (isPasswordMatching) {\n        return true;\n      }\n    }\n    throw new UnauthenticatedError('Password do not match the saved one');\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const user = await this.userModel\n      .findOne({ email: loginDto.email })\n      .select('+password');\n\n    await this.comparePassword(user, loginDto.password);\n\n    if (user && user.blocked) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    let session = await this.sessionService.findOne({\n      userId: user._id,\n      revoked: false,\n    });\n\n    if (session == null) {\n      session = await this.sessionService.create({\n        userId: user._id,\n        email: user.email,\n        userName: user.username,\n        roles: user.roles,\n      });\n    }\n\n    const payload: JWTPayload = {\n      userId: session._id,\n      sessionId: session._id,\n      email: session.email,\n      username: session.username,\n      roles: session.roles,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: _.omit(user.toJSON(), ['password']),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/authorization.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                authorize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                    \n                    authorize(token: JWTPayload, allowedRoles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/authorization.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allowedRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { UnauthorizedError } from './errors';\nimport { JWTPayload } from './types';\n\nexport class Authorization {\n  static authorize(token: JWTPayload, allowedRoles: string[]) {\n    const roles = _.get(token, 'roles', []);\n    const intersectedRoles = _.intersection(roles, allowedRoles);\n    const hasAccess = intersectedRoles.length ? true : false;\n    if (hasAccess === false) {\n      throw new UnauthorizedError();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseError.html":{"url":"classes/BaseError.html","title":"class - BaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(code: number, name: string, status: number, message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in src/common/errors.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl-ability.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\nimport { Action, Roles } from 'src/common/constant';\nimport { User } from 'src/components/users/users.schema';\nimport { Session } from 'src/components/sessions/session.schema';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, build } = new AbilityBuilder>(\n      Ability as AbilityClass,\n    );\n\n    if (_.includes(user.roles, Roles.ADMIN)) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can([Action.Read, Action.Update], User); // read-update access to everything\n    }\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                parseValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseValidationErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseValidationErrors(err: any, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    //@ts-ignore\n    const status = exception.status || HttpStatus.INTERNAL_SERVER_ERROR;\n    const payload = {\n      statusCode: status,\n      name: exception.name,\n      message: exception.message || 'Error',\n      path: request.url,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.parseValidationErrors(exception, payload);\n\n    response.status(status).json(payload);\n  }\n\n  private parseValidationErrors(err: any, payload: any) {\n    if (err.status && err.status === 400) {\n      const instancePath = _.get(err, 'errors.0.instancePath');\n      const message = _.get(err, 'errors.0.message');\n      // Handle ajv errors\n      if (Array.isArray(err.errors)) {\n        payload.details = err.errors;\n        payload.message = `Validation error: \"${instancePath}\" ${message}`;\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            jwt_expires_in\n                                        \n                                \n                                \n                                        \n                                            jwt_secret\n                                        \n                                \n                                \n                                        \n                                            mongo_uri\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_expires_in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_expires_in:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mongo_uri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongo_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  port: number;\n  host: string;\n  mongo_uri: string;\n  jwt_secret: string;\n  jwt_expires_in: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTPayload {\n  userId: string;\n  sessionId: string;\n  email: string;\n  username: string;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/jwt-auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/jwt-auth.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { config } from 'src/config';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from 'src/common/errors';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private sessionService: SessionService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: config.jwt_secret,\n    });\n  }\n\n  async validate(payload: Record): Promise {\n    const session = await this.sessionService.findOne({\n      _id: payload.sessionId,\n    });\n\n    if (session == null) {\n      throw new UnauthenticatedError('User session is not found');\n    }\n\n    if (session.revoked === true) {\n      throw new UnauthenticatedError('User session is revoked');\n    }\n\n    if (session.blocked === true) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodNotImplementedError.html":{"url":"classes/MethodNotImplementedError.html","title":"class - MethodNotImplementedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodNotImplementedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Session.html":{"url":"classes/Session.html","title":"class - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                revoked\n                            \n                            \n                                roles\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\nimport { User } from '../users/users.schema';\n\n@Schema({\n  versionKey: false,\n})\nexport class Session extends Document {\n  @Prop({\n    type: SchemaTypes.ObjectId,\n    ref: User.name,\n    required: true,\n  })\n  userId: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  revoked: boolean;\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const SessionSchema = SchemaFactory.createForClass(Session);\n\nSessionSchema.index({ userId: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(req, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({schema: undefined})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('revoke')\n                \n            \n\n            \n                \n                    Defined in src/components/sessions/session.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Put, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { UnauthorizedError, ValidationError } from 'src/common/errors';\nimport { SessionService } from './session.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslAbilityFactory } from 'src/casl/casl-ability.factory';\nimport { Action } from 'src/common/constant';\nimport { Session } from './session.schema';\n\n@ApiTags(capitalizeInitials(ROUTES.session.name))\n@Controller(ROUTES.session.route)\nexport class SessionController {\n  constructor(\n    private readonly sessionService: SessionService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @ApiBody({\n    schema: {\n      example: { email: 'test@gmail.com' },\n    },\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('revoke')\n  async revokeUser(\n    @Request() req,\n    @Body() body: { email: string },\n  ): Promise {\n    if (!body.email) {\n      new ValidationError(null, `Email field is required`);\n    }\n\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, Session)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.sessionService.revokeUser(body.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/sessions/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CaslModule } from 'src/casl/casl.module';\nimport { SessionController } from './session.controller';\nimport { Session, SessionSchema } from './session.schema';\nimport { SessionService } from './session.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Session.name, schema: SessionSchema }]),\n    CaslModule,\n  ],\n  controllers: [SessionController],\n  providers: [SessionService],\n  exports: [SessionService],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionPayload.html":{"url":"interfaces/SessionPayload.html","title":"interface - SessionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SessionPayload {\n  userId: string;\n  userName: string;\n  email: string;\n  roles: string[];\n  revoked?: boolean;\n  blocked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/sessions/session.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: SessionPayload, transaction: mongoose.ClientSession | null)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SessionPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(userId: string, transaction: mongoose.ClientSession)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ObjectId } from 'bson';\nimport * as mongoose from 'mongoose';\n\nimport { Model, FilterQuery } from 'mongoose';\nimport { SessionPayload } from './session.interface';\nimport { Session } from './session.schema';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    @InjectModel(Session.name) private sessionModel: Model,\n  ) {}\n\n  async create(\n    data: SessionPayload,\n    transaction: mongoose.ClientSession | null = null,\n  ): Promise {\n    const accessToken = new this.sessionModel(data);\n    return accessToken.save({ session: transaction });\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.sessionModel.findOne(condition);\n  }\n\n  async revokeUser(email: string): Promise {\n    return this.sessionModel.updateOne(\n      { email, revoked: false },\n      { $set: { revoked: true } },\n    );\n  }\n\n  async deleteMany(userId: string, transaction: mongoose.ClientSession) {\n    return this.sessionModel.deleteMany(\n      {\n        userId: new ObjectId(userId),\n      },\n      { session: transaction },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthenticatedError.html":{"url":"classes/UnauthenticatedError.html","title":"class - UnauthenticatedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthenticatedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedError.html":{"url":"classes/UnexpectedError.html","title":"class - UnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\n\n@Schema({\n  versionKey: false,\n})\nexport class User extends Document {\n  @Prop()\n  username: string;\n\n  @Prop({ unique: true })\n  email: string;\n\n  @Prop({ select: false })\n  password: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.methods.toJSON = function () {\n  const obj = this.toObject();\n  delete obj.password;\n  return obj;\n};\n\nUserSchema.index({ email: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('log-out')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { FilterQuery } from 'mongoose';\nimport { CaslAbilityFactory } from 'src/casl/casl-ability.factory';\nimport { Action } from 'src/common/constant';\nimport { UnauthorizedError, ValidationError } from 'src/common/errors';\nimport { ROUTES } from 'src/common/routes';\nimport { capitalizeInitials } from 'src/utils';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\nimport { UsersService } from './users.service';\nimport { validateUser } from './users.validation';\n\n@ApiTags(capitalizeInitials(ROUTES.users.name))\n@Controller(ROUTES.users.route)\nexport class UsersController {\n  constructor(\n    private readonly userService: UsersService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @Post()\n  async create(@Body() userDto: UsersDto): Promise {\n    const isValid = validateUser(userDto);\n    if (!isValid) {\n      throw new ValidationError(null, validateUser.errors);\n    }\n\n    return await this.userService.create(userDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('log-out')\n  async logOut(@Request() req: any): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.logOut(req.user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async get(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Read, User)) {\n      throw new UnauthorizedError();\n    }\n\n    const conditions: FilterQuery = { _id: userId };\n    return await this.userService.findOne(conditions);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Delete, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.delete(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersDto.html":{"url":"classes/UsersDto.html","title":"class - UsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                roles\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UsersDto {\n  @ApiProperty({ required: true })\n  readonly username: string;\n\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n\n  @ApiProperty()\n  readonly roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './users.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { SessionModule } from '../sessions/session.module';\nimport { CaslModule } from 'src/casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, connection: mongoose.Connection, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    mongoose.Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(token: JWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\nimport * as mongoose from 'mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { NotFoundError, ValidationError } from 'src/common/errors';\nimport { JWTPayload } from 'src/common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @InjectConnection() private readonly connection: mongoose.Connection,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async create(userDto: UsersDto): Promise {\n    let user = await this.userModel.findOne({ email: userDto.email });\n\n    if (user) {\n      throw new ValidationError(\n        `user with email ${userDto.email} already exists`,\n      );\n    }\n\n    let session = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      const password = bcrypt.hashSync(userDto.password, 10);\n      user = new this.userModel({ ...userDto, password });\n      await user.save({ session: transaction });\n      session = await this.sessionService.create(\n        {\n          userId: user._id,\n          email: user.email,\n          userName: user.username,\n          roles: user.roles,\n        },\n        transaction,\n      );\n    });\n\n    await transaction.endSession();\n    return session;\n  }\n\n  async logOut(token: JWTPayload): Promise {\n    const updatedResult = await this.sessionService.revokeUser(token.email);\n    if (updatedResult.modifiedCount) {\n      return { message: 'log-out successful' };\n    }\n    return { message: 'log-out failed' };\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.userModel.findOne(condition);\n  }\n\n  async delete(userId: string): Promise {\n    const condition: FilterQuery = { _id: userId };\n    const user = await this.userModel.findOne(condition);\n\n    if (!user) {\n      throw new NotFoundError(`user with id ${condition._id} is not found`);\n    }\n\n    let deleteResult = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      deleteResult = await this.userModel.deleteOne(condition);\n      await this.sessionService.deleteMany(userId, transaction);\n    });\n    await transaction.endSession();\n\n    return deleteResult;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errors\n                            \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, errors?: any)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/authorization.ts\n            \n            class\n            Authorization\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            RolesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            BaseError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            MethodNotImplementedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthenticatedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnexpectedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            ValidationError\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/regex.ts\n            \n            variable\n            regex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/routes.ts\n            \n            variable\n            ROUTES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/types.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/validator.ts\n            \n            variable\n            AjvOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/auth/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            LoginSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            validateLogin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/sessions/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/sessions/session.interface.ts\n            \n            interface\n            SessionPayload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            class\n            Session\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            variable\n            SessionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/sessions/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.dto.ts\n            \n            class\n            UsersDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            validateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            IConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            currentEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            envs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/index.ts\n            \n            function\n            capitalizeInitials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.4\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            ajv : ^8.11.0\n        \n            bcrypt : ^5.0.1\n        \n            dotenv : ^16.0.1\n        \n            lodash : ^4.17.21\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constant.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            capitalizeInitials   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalizeInitials\n                        \n                    \n                \n            \n            \n                \ncapitalizeInitials(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nAdd users update endpoint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (src/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ajv   (src/.../auth.validation.ts)\n                        \n                        \n                            ajv   (src/.../users.validation.ts)\n                        \n                        \n                            AjvOptions   (src/.../validator.ts)\n                        \n                        \n                            config   (src/.../index.ts)\n                        \n                        \n                            currentEnv   (src/.../index.ts)\n                        \n                        \n                            envs   (src/.../index.ts)\n                        \n                        \n                            LoginSchema   (src/.../auth.validation.ts)\n                        \n                        \n                            regex   (src/.../regex.ts)\n                        \n                        \n                            Roles   (src/.../constant.ts)\n                        \n                        \n                            RolesList   (src/.../constant.ts)\n                        \n                        \n                            ROUTES   (src/.../routes.ts)\n                        \n                        \n                            SessionSchema   (src/.../session.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.validation.ts)\n                        \n                        \n                            validateLogin   (src/.../auth.validation.ts)\n                        \n                        \n                            validateUser   (src/.../users.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/auth/auth.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n  },\n  required: ['email', 'password'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateLogin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(LoginSchema)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    username: { type: 'string', pattern: regex.name },\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n    roles: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: RolesList,\n      },\n    },\n  },\n  required: ['username', 'email', 'password', 'roles'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(UserSchema)\n                    \n                \n\n\n        \n    \n\n    src/common/validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AjvOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n  allErrors: true,\n  useDefaults: true,\n  formats: { email: true },\n}\n                    \n                \n\n\n        \n    \n\n    src/config/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...envs[currentEnv],\n  jwt_secret: process.env.JWT_SECRET,\n  jwt_expires_in: process.env.JWT_EXPIRES_IN,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentEnv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV || 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  development,\n  staging,\n  production,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/regex.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        regex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  name: '^[a-zA-Z][^&<>*:\"~$%]{1,49}$',\n  password:\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUPER_ADMIN: 'super_admin',\n  ADMIN: 'admin',\n  USER: 'user',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RolesList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(Roles)\n                    \n                \n\n\n        \n    \n\n    src/common/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROUTES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  users: {\n    route: 'users',\n    name: 'users',\n  },\n  auth: {\n    route: 'login',\n    name: 'auth',\n  },\n  session: {\n    route: 'sessions',\n    name: 'sessions',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/components/sessions/session.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Session)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

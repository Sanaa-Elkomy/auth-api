var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.456,1,2.33]],["body/controllers/AppController.html",[0,2.263,1,3.623,2,1.908,3,0.354,4,0.354,5,0.278,6,3.594,7,0.393,8,1.269,9,5.28,10,5.28,11,2.602,12,0.025,13,5.386,14,0.97,15,4.24,16,1.189,17,0.97,18,4.24,19,1.04,20,1.066,21,3.333,22,3.594,23,0.354,24,0.014,25,3.169,26,2.048,27,1.354,28,4.24,29,4.24,30,0.019,31,0.019]],["title/modules/AppModule.html",[32,1.456,33,2.33]],["body/modules/AppModule.html",[1,3.644,2,2.151,3,0.295,4,0.295,5,0.232,12,0.025,19,1.271,20,0.889,21,3.519,22,2.997,23,0.295,24,0.012,30,0.017,31,0.017,32,2.009,33,4.608,34,1.708,35,2.151,36,2.997,37,2.997,38,2.997,39,3.83,40,3.252,41,3.252,42,3.83,43,2.692,44,1.991,45,1.591,46,3.536,47,2.93,48,3.216,49,2.378,50,1.485,51,3.536,52,3.536,53,2.93,54,3.536,55,3.536,56,2.643,57,3.536]],["title/injectables/AppService.html",[21,1.951,58,1.054]],["body/injectables/AppService.html",[3,0.374,4,0.374,5,0.294,7,0.416,8,1.315,9,5.388,10,5.388,12,0.024,14,1.004,16,1.231,17,0.99,19,0.865,20,1.127,21,3.141,23,0.374,24,0.015,27,1.402,30,0.019,31,0.019,58,1.696,59,2.166,60,3.801,61,4.483,62,4.483,63,4.483,64,4.483,65,4.483]],["title/controllers/AuthController.html",[0,1.456,66,2.33]],["body/controllers/AuthController.html",[0,1.551,2,1.661,3,0.308,4,0.308,5,0.242,7,0.342,8,1.16,11,1.783,12,0.025,14,0.665,16,0.815,19,1.267,20,0.928,23,0.308,24,0.013,25,2.76,26,1.783,27,0.928,30,0.017,31,0.017,66,3.311,67,3.13,68,2.882,69,3.679,70,3.13,71,3.878,72,4.694,73,3.692,74,0.928,75,0.713,76,0.452,77,0.87,78,2.561,79,3.118,80,3.692,81,2.76,82,2.76,83,2.079,84,3.13,85,2.262,86,2.76,87,2.262,88,2.76,89,2.76,90,3.692,91,1.275,92,2.079,93,3.692,94,3.692,95,3.692,96,1.359,97,4.173,98,3.692,99,1.359,100,3.13,101,3.692,102,2.079,103,3.692]],["title/modules/AuthModule.html",[32,1.456,39,2.123]],["body/modules/AuthModule.html",[2,2.087,3,0.282,4,0.282,5,0.222,12,0.025,19,1.274,20,0.85,23,0.282,24,0.012,30,0.016,31,0.016,32,1.949,34,1.634,35,2.087,39,4.23,41,3.209,43,2.612,44,1.904,45,1.522,47,2.843,48,3.121,49,2.275,50,1.421,53,2.843,66,3.562,75,0.653,79,3.472,104,2.868,105,3.383,106,2.868,107,2.868,108,3.779,109,3.383,110,3.121,111,3.383,112,2.275,113,3.383,114,3.383,115,3.383,116,2.528,117,1.245,118,2.843,119,2.528,120,3.468,121,3.383,122,2.868,123,2.528,124,2.528,125,1.904,126,3.383,127,3.383,128,3.383,129,3.383,130,2.868]],["title/injectables/AuthService.html",[58,1.054,79,1.951]],["body/injectables/AuthService.html",[3,0.211,4,0.211,5,0.166,7,0.235,8,0.889,12,0.025,14,0.812,16,0.833,17,0.702,19,1.214,20,0.637,23,0.211,24,0.009,26,1.224,27,0.948,30,0.013,31,0.013,50,1.064,58,1.147,59,1.224,68,2.913,69,2.82,70,3.198,71,3.272,74,1.133,75,0.87,76,0.552,77,1.062,78,2.599,79,2.124,84,2.148,92,1.427,96,1.659,99,1.389,102,3.006,116,1.894,117,2.241,119,1.894,131,2.148,132,3.773,133,1.302,134,2.148,135,3.733,136,5.798,137,2.609,138,2.534,139,3.198,140,3.773,141,2.811,142,2.534,143,2.534,144,1.704,145,1.553,146,2.82,147,1.427,148,1.894,149,2.124,150,2.148,151,1.894,152,0.996,153,2.148,154,2.538,155,3.773,156,2.534,157,2.534,158,1.224,159,2.124,160,2.534,161,2.534,162,2.534,163,2.534,164,2.148,165,1.894,166,1.771,167,2.534,168,2.534,169,2.534,170,2.534,171,2.534,172,2.148,173,2.148,174,1.553,175,1.771,176,2.148,177,2.346,178,3.198,179,1.553,180,1.427,181,1.704,182,2.148,183,2.148,184,1.822,185,2.148,186,1.483,187,2.148,188,1.894,189,3.773,190,2.148,191,2.534,192,2.534,193,2.534,194,2.534,195,2.534,196,2.534]],["title/classes/Authorization.html",[24,0.012,197,2.59]],["body/classes/Authorization.html",[3,0.33,4,0.33,5,0.259,7,0.367,8,1.213,12,0.025,14,0.712,16,0.873,17,0.892,19,1.105,23,0.33,24,0.013,30,0.018,31,0.018,74,0.994,75,0.763,76,0.485,77,0.932,96,2.108,99,1.456,144,2.659,145,2.423,149,3.416,158,1.91,159,2.226,180,2.899,186,2.024,197,3.849,198,1.202,199,3.352,200,5.727,201,5.149,202,5.149,203,6.067,204,3.953,205,3.352,206,3.352,207,1.896,208,1.779,209,3.352,210,3.953,211,3.953,212,3.953,213,5.149,214,3.953]],["title/classes/BaseError.html",[24,0.012,215,1.559]],["body/classes/BaseError.html",[3,0.223,4,0.223,5,0.176,7,0.248,8,0.926,12,0.025,14,0.924,16,0.591,17,0.799,23,0.492,24,0.02,27,0.673,30,0.014,31,0.014,74,0.673,75,1.055,76,0.571,77,0.631,91,1.357,133,1.357,152,1.545,198,0.814,207,1.447,208,2.095,215,2.724,216,1.294,217,2.379,218,2.851,219,1.053,220,3.15,221,2.851,222,2.67,223,2.678,224,2.984,225,2.898,226,3.931,227,2.678,228,2.678,229,1.294,230,2.095,231,2.423,232,1.394,233,1.394,234,1.394,235,2.046,236,2.046,237,1.394,238,2.046,239,1.651,240,2.972,241,2.046,242,2.972,243,1.394,244,1.294,245,1.394,246,1.394,247,1.294,248,1.394,249,1.394,250,1.125,251,1.294,252,1.394,253,1.769,254,1.394,255,1.394,256,1.394]],["title/injectables/CaslAbilityFactory.html",[58,1.054,257,1.803]],["body/injectables/CaslAbilityFactory.html",[3,0.288,4,0.288,5,0.227,7,0.32,8,1.109,12,0.025,14,0.622,16,0.762,19,1.198,20,0.868,23,0.392,24,0.012,27,0.868,30,0.016,31,0.016,58,1.431,59,1.668,74,0.868,75,0.666,76,0.704,77,0.814,96,1.271,99,1.271,117,2.285,144,2.322,145,2.116,175,1.357,186,1.357,198,1.05,209,2.927,247,2.273,257,2.448,258,3.517,259,2.581,260,4.705,261,4.705,262,3.452,263,3.6,264,4.705,265,4.705,266,4.705,267,3.988,268,2.927,269,2.322,270,2.581,271,3.452,272,3.452,273,2.927,274,2.927,275,4.705,276,3.452,277,3.452,278,3.452,279,4.537,280,3.452,281,4.705,282,3.452,283,3.452,284,2.581,285,3.452,286,3.452,287,3.452,288,3.452,289,3.452,290,3.452,291,3.452]],["title/modules/CaslModule.html",[32,1.456,40,1.803]],["body/modules/CaslModule.html",[3,0.367,4,0.367,5,0.289,12,0.024,19,1.064,20,1.106,23,0.367,24,0.015,30,0.019,31,0.019,32,2.316,34,2.125,35,2.481,40,3.502,43,3.104,44,2.477,45,1.979,47,3.378,110,3.708,257,3.636,292,3.729,293,3.729,294,3.729,295,4.399,296,4.399,297,3.288]],["title/classes/HttpExceptionFilter.html",[24,0.012,298,2.59]],["body/classes/HttpExceptionFilter.html",[3,0.26,4,0.26,5,0.204,7,0.289,8,1.032,12,0.025,14,0.788,16,0.967,19,0.978,20,0.782,23,0.26,24,0.011,30,0.015,31,0.015,74,1.101,75,0.978,76,0.537,77,1.032,96,2.273,99,1.146,144,2.094,145,1.908,154,2.852,188,4.331,198,0.946,206,3.713,208,1.401,218,2.116,221,2.116,225,2.28,250,1.84,251,1.504,298,3.273,299,4.295,300,2.639,301,4.379,302,5.066,303,5.497,304,4.379,305,4.379,306,5.497,307,4.295,308,5.497,309,3.113,310,3.113,311,4.379,312,3.113,313,3.113,314,2.639,315,4.379,316,2.639,317,3.113,318,3.113,319,3.113,320,3.113,321,3.113,322,3.113,323,3.113,324,3.113,325,3.113,326,3.113,327,3.113,328,3.113,329,3.113,330,3.113,331,3.113,332,3.113,333,3.113,334,4.379,335,4.379,336,4.379,337,3.113,338,3.113,339,3.113,340,2.094,341,3.113,342,3.113,343,3.113,344,3.113,345,3.113]],["title/interfaces/IConfig.html",[346,1.803,347,2.33]],["body/interfaces/IConfig.html",[3,0.36,4,0.36,5,0.283,7,0.4,12,0.024,17,1.085,23,0.36,30,0.019,31,0.019,76,0.792,219,1.46,224,2.884,307,5.316,346,2.247,347,3.665,348,2.904,349,3.661,350,5.316,351,5.316,352,6.27,353,6.27]],["title/interfaces/JWTPayload.html",[149,1.951,346,1.803]],["body/interfaces/JWTPayload.html",[3,0.36,4,0.36,5,0.283,7,0.4,12,0.024,17,1.098,23,0.36,30,0.019,31,0.019,76,0.792,149,3.068,166,2.464,177,3.263,184,3.029,186,2.464,190,5.316,219,1.46,346,2.247,348,2.904,354,3.661]],["title/injectables/JwtAuthGuard.html",[58,1.054,355,2.123]],["body/injectables/JwtAuthGuard.html",[3,0.414,4,0.414,5,0.325,12,0.024,19,1.145,20,1.246,23,0.414,24,0.017,30,0.021,31,0.021,58,1.804,59,2.395,112,3.335,217,1.948,355,3.635,356,3.706,357,4.203,358,4.958,359,4.958]],["title/injectables/JwtStrategy.html",[58,1.054,108,2.123]],["body/injectables/JwtStrategy.html",[3,0.277,4,0.277,5,0.218,7,0.307,8,1.078,12,0.025,14,0.824,16,0.732,19,1.183,20,0.833,23,0.277,24,0.011,25,2.478,27,0.833,30,0.016,31,0.016,53,2.804,58,1.391,59,1.602,68,2.727,74,1.15,75,0.883,76,0.561,77,1.078,78,2.381,92,1.867,96,1.221,99,1.929,102,1.867,108,2.804,112,2.23,120,2.478,130,2.811,133,1.145,137,2.758,151,2.478,152,1.303,158,2.531,159,2.95,172,4.442,173,2.811,174,2.032,175,2.22,176,2.811,179,2.032,181,2.23,188,3.421,217,1.303,356,3.917,360,2.811,361,4.576,362,3.315,363,3.315,364,4.576,365,5.24,366,3.315,367,3.315,368,3.315,369,2.811,370,3.315,371,3.315,372,3.315,373,3.315,374,3.315,375,3.315,376,3.315,377,2.478,378,3.315,379,2.811,380,3.315,381,3.315]],["title/classes/LoginDto.html",[24,0.012,71,2.123]],["body/classes/LoginDto.html",[3,0.371,4,0.371,5,0.292,7,0.413,11,2.682,12,0.024,14,1,17,0.987,19,0.859,23,0.371,24,0.015,26,3.213,30,0.019,31,0.019,71,3.402,76,0.681,83,2.505,141,3.408,166,2.379,198,1.353,219,1.487,382,3.772,383,5.53,384,4.449,385,4.449]],["title/classes/MethodNotImplementedError.html",[24,0.012,253,1.559]],["body/classes/MethodNotImplementedError.html",[3,0.227,4,0.227,5,0.178,7,0.252,8,0.936,12,0.025,14,0.93,16,0.599,17,0.618,23,0.495,24,0.02,27,0.683,30,0.014,31,0.014,74,0.683,75,0.906,76,0.575,77,0.64,91,1.371,133,1.371,152,1.561,198,0.826,207,1.462,208,2.112,215,2.873,216,1.312,217,2.388,218,2.772,219,1.064,220,3.085,221,2.654,222,2.687,224,2.654,225,2.873,229,1.312,230,2.112,231,2.443,232,1.413,233,1.413,234,1.413,235,2.066,236,2.066,237,1.413,238,2.066,239,1.668,240,3.085,241,2.066,242,2.986,243,1.413,244,1.312,245,1.413,246,1.413,247,1.312,248,1.413,249,1.413,250,1.141,251,1.312,252,1.413,253,2.112,254,1.413,255,1.413,256,1.413,386,2.716,387,2.643,388,1.529,389,1.529,390,1.529]],["title/classes/NotFoundError.html",[24,0.012,239,1.456]],["body/classes/NotFoundError.html",[3,0.227,4,0.227,5,0.178,7,0.252,8,0.936,12,0.025,14,0.93,16,0.599,17,0.618,23,0.495,24,0.02,27,0.683,30,0.014,31,0.014,74,0.683,75,0.906,76,0.575,77,0.64,91,1.371,133,1.371,152,1.561,198,0.826,207,1.462,208,2.112,215,2.873,216,1.312,217,2.388,218,2.772,219,1.064,220,3.085,221,2.654,222,2.687,224,2.654,225,2.873,229,1.312,230,2.112,231,2.443,232,1.413,233,1.413,234,1.413,235,2.066,236,2.066,237,1.413,238,2.066,239,1.972,240,3.085,241,2.066,242,2.986,243,1.413,244,1.312,245,1.413,246,1.413,247,1.312,248,1.413,249,1.413,250,1.141,251,1.312,252,1.413,253,1.787,254,1.413,255,1.413,256,1.413,387,2.643,388,1.529,389,1.529,390,1.529,391,2.716]],["title/classes/Session.html",[24,0.012,175,1.362]],["body/classes/Session.html",[3,0.266,4,0.266,5,0.209,7,0.296,11,2.925,12,0.025,14,1.09,17,0.987,19,0.991,23,0.372,24,0.011,30,0.016,31,0.016,50,1.34,76,0.789,96,1.174,117,1.174,119,2.384,124,2.384,125,2.508,147,1.796,158,2.152,166,2.017,174,3.145,175,1.751,177,2.891,179,3.145,180,3.291,184,2.48,186,2.017,198,0.97,217,1.751,219,1.193,392,2.384,393,4.351,394,4.153,395,4.351,396,4.71,397,3.737,398,3.189,399,5.531,400,3.189,401,3.189,402,3.189,403,4.454,404,2.73,405,3.189,406,3.189,407,2.704,408,2.704,409,2.704,410,3.189,411,3.776,412,2.145,413,2.704,414,3.189,415,2.704]],["title/controllers/SessionController.html",[0,1.456,416,2.33]],["body/controllers/SessionController.html",[0,1.322,2,1.416,3,0.262,4,0.262,5,0.206,7,0.292,8,1.04,11,1.52,12,0.025,14,0.566,16,0.695,17,0.49,19,1.256,20,0.791,23,0.262,24,0.011,26,1.52,27,0.791,30,0.015,31,0.015,68,2.652,74,0.791,75,0.607,76,0.625,77,0.741,78,2.296,81,4.348,82,2.352,83,1.771,85,1.928,86,2.352,87,1.928,88,2.352,91,1.086,92,1.771,96,1.158,99,1.624,100,2.667,102,1.771,125,1.771,133,1.086,137,2.293,154,2.484,159,1.771,166,2.003,175,1.734,207,1.624,250,1.854,257,2.652,263,2.116,269,2.116,270,2.352,297,2.352,355,1.928,404,1.928,416,2.968,417,2.667,418,4.32,419,3.146,420,4.412,421,3.146,422,3.146,423,3.146,424,3.741,425,2.667,426,2.667,427,3.741,428,4.412,429,2.667,430,2.667,431,2.667,432,2.667,433,2.352,434,3.146,435,3.146,436,3.146,437,3.146,438,2.667,439,3.146,440,3.146,441,3.146,442,2.667,443,2.667,444,3.146]],["title/modules/SessionModule.html",[32,1.456,41,1.803]],["body/modules/SessionModule.html",[2,2.253,3,0.316,4,0.316,5,0.249,12,0.025,19,1.23,20,0.952,23,0.316,24,0.013,30,0.017,31,0.017,32,2.103,34,1.83,35,2.253,40,3.317,41,3.475,43,2.819,44,2.132,45,1.704,47,3.068,48,3.367,49,2.547,50,1.591,56,2.831,75,0.731,110,3.367,123,2.831,125,2.132,137,3.078,175,1.488,412,3.367,416,3.772,429,3.211,433,2.831,445,3.211,446,3.787,447,3.211,448,3.211,449,3.787,450,3.787,451,3.787]],["title/interfaces/SessionPayload.html",[346,1.803,452,2.33]],["body/interfaces/SessionPayload.html",[3,0.344,4,0.344,5,0.27,7,0.382,12,0.024,17,1.078,23,0.344,30,0.018,31,0.018,76,0.799,77,1.452,166,2.422,174,3.777,177,3.207,179,3.777,184,2.977,186,2.422,219,1.417,346,2.144,348,2.771,394,4.875,452,3.557,453,3.493]],["title/injectables/SessionService.html",[58,1.054,137,1.559]],["body/injectables/SessionService.html",[3,0.222,4,0.222,5,0.175,7,0.247,8,0.922,12,0.025,14,0.981,16,1.129,17,0.887,19,1.137,20,0.669,23,0.222,24,0.009,27,1.285,30,0.014,31,0.014,50,1.118,58,1.189,59,1.285,68,3.347,74,1.369,75,1.052,76,0.668,77,1.284,78,2.965,96,0.979,99,1.44,133,1.35,135,3.822,137,1.76,147,2.611,148,1.989,154,1.498,158,1.285,165,2.924,166,1.537,175,1.823,177,2.035,179,2.397,180,1.498,181,3.665,397,1.789,418,3.316,433,1.989,452,3.439,454,2.255,455,2.842,456,3.911,457,2.66,458,2.66,459,3.911,460,2.66,461,5.122,462,5.697,463,2.66,464,1.989,465,3.911,466,3.911,467,2.66,468,2.66,469,3.316,470,3.822,471,2.66,472,2.255,473,3.911,474,2.66,475,2.66,476,2.66,477,2.66,478,2.66,479,2.66,480,2.66,481,2.66,482,2.66,483,2.66,484,2.255,485,2.66,486,2.66]],["title/classes/UnauthenticatedError.html",[24,0.012,152,1.362]],["body/classes/UnauthenticatedError.html",[3,0.227,4,0.227,5,0.178,7,0.252,8,0.936,12,0.025,14,0.93,16,0.599,17,0.618,23,0.495,24,0.02,27,0.683,30,0.014,31,0.014,74,0.683,75,0.906,76,0.575,77,0.64,91,1.371,133,1.371,152,1.845,198,0.826,207,1.462,208,2.112,215,2.873,216,1.312,217,2.388,218,2.772,219,1.064,220,3.085,221,2.654,222,2.687,224,2.654,225,2.873,229,1.312,230,2.112,231,2.443,232,1.413,233,1.413,234,1.413,235,2.066,236,2.066,237,1.413,238,2.066,239,1.668,240,3.085,241,2.066,242,2.986,243,1.413,244,1.312,245,1.413,246,1.413,247,1.312,248,1.413,249,1.413,250,1.141,251,1.312,252,1.413,253,1.787,254,1.413,255,1.413,256,1.413,387,2.643,388,1.529,389,1.529,390,1.529,487,2.716]],["title/classes/UnauthorizedError.html",[24,0.012,207,1.276]],["body/classes/UnauthorizedError.html",[3,0.227,4,0.227,5,0.178,7,0.252,8,0.936,12,0.025,14,0.93,16,0.599,17,0.618,23,0.495,24,0.02,27,0.683,30,0.014,31,0.014,74,0.683,75,0.906,76,0.575,77,0.64,91,1.371,133,1.371,152,1.561,198,0.826,207,1.728,208,2.112,215,2.873,216,1.312,217,2.388,218,2.772,219,1.064,220,3.085,221,2.654,222,2.687,224,2.654,225,2.873,229,1.312,230,2.112,231,2.443,232,1.413,233,1.413,234,1.413,235,2.066,236,2.066,237,1.413,238,2.066,239,1.668,240,3.085,241,2.066,242,2.986,243,1.413,244,1.312,245,1.413,246,1.413,247,1.312,248,1.413,249,1.413,250,1.141,251,1.312,252,1.413,253,1.787,254,1.413,255,1.413,256,1.413,387,2.643,388,1.529,389,1.529,390,1.529,488,2.716]],["title/classes/UnexpectedError.html",[24,0.012,230,1.559]],["body/classes/UnexpectedError.html",[3,0.227,4,0.227,5,0.178,7,0.252,8,0.936,12,0.025,14,0.93,16,0.599,17,0.618,23,0.495,24,0.02,27,0.683,30,0.014,31,0.014,74,0.683,75,0.906,76,0.575,77,0.64,91,1.371,133,1.371,152,1.561,198,0.826,207,1.462,208,2.112,215,2.873,216,1.312,217,2.388,218,2.772,219,1.064,220,3.085,221,2.654,222,2.687,224,2.654,225,2.873,229,1.312,230,2.324,231,2.443,232,1.413,233,1.413,234,1.413,235,2.066,236,2.066,237,1.413,238,2.066,239,1.668,240,3.085,241,2.066,242,2.986,243,1.413,244,1.312,245,1.413,246,1.413,247,1.312,248,1.413,249,1.413,250,1.141,251,1.312,252,1.413,253,1.787,254,1.413,255,1.413,256,1.413,387,2.643,388,1.529,389,1.529,390,1.529,489,2.716]],["title/classes/User.html",[24,0.012,117,1.276]],["body/classes/User.html",[3,0.278,4,0.278,5,0.219,7,0.309,11,2.87,12,0.025,14,1.07,17,0.998,19,0.887,23,0.383,24,0.011,27,0.838,30,0.016,31,0.016,50,1.401,76,0.753,96,1.691,117,1.691,118,2.043,125,2.587,141,2.959,147,1.877,158,2.219,166,2.226,174,3.221,180,3.345,184,2.539,186,2.066,198,1.014,217,1.805,219,1.231,393,4.456,394,3.434,395,2.827,396,2.827,397,3.09,399,5.434,407,2.827,408,2.827,409,2.827,411,2.827,415,2.827,490,2.492,491,3.334,492,3.334,493,3.334,494,3.334,495,3.334,496,3.334,497,3.334,498,3.334,499,3.334,500,2.827,501,3.334,502,2.827,503,4.594,504,3.334,505,2.243,506,3.334,507,3.334]],["title/controllers/UsersController.html",[0,1.456,508,2.33]],["body/controllers/UsersController.html",[0,0.968,2,1.037,3,0.192,4,0.192,5,0.151,7,0.214,8,0.828,11,2.3,12,0.025,14,0.857,16,1.051,17,0.841,19,1.218,20,0.579,23,0.192,24,0.008,26,1.113,27,1.196,30,0.012,31,0.012,45,1.58,68,3.246,72,3.608,74,1.196,75,0.919,76,0.583,77,1.122,78,3.012,81,1.722,82,1.722,83,1.297,85,1.412,86,1.722,87,1.412,88,1.722,91,0.796,92,1.297,96,1.887,97,2.978,99,1.752,102,2.68,117,1.752,133,0.796,147,1.297,154,1.978,159,2.68,177,2.922,207,1.752,250,0.968,257,2.215,263,2.863,269,1.55,270,1.722,297,1.722,314,1.954,355,1.412,377,1.722,424,4.577,425,1.954,426,1.954,427,4.035,430,1.954,431,1.954,432,1.954,438,3.608,442,3.608,443,1.954,455,2.152,470,2.625,505,2.863,508,2.362,509,1.954,510,2.978,511,1.954,512,2.917,513,2.304,514,2.978,515,2.304,516,2.304,517,2.304,518,2.304,519,2.304,520,2.304,521,2.304,522,2.304,523,2.304,524,1.954,525,2.304,526,2.304,527,1.954,528,1.722,529,1.978,530,1.954,531,1.722,532,2.304,533,2.304,534,2.304,535,2.304,536,2.304,537,2.304,538,2.304,539,2.304,540,2.304,541,2.304,542,2.304,543,2.304,544,2.304,545,3.512,546,2.304,547,2.304,548,2.304,549,2.304,550,2.304,551,2.304,552,2.304,553,2.304]],["title/classes/UsersDto.html",[24,0.012,512,2.123]],["body/classes/UsersDto.html",[3,0.327,4,0.327,5,0.257,7,0.363,11,2.92,12,0.024,14,1.088,17,1.035,19,0.755,23,0.327,24,0.013,26,3.321,30,0.018,31,0.018,76,0.741,83,2.204,141,3.209,158,2.471,166,2.24,184,2.753,186,2.24,198,1.19,219,1.37,383,5.635,404,2.398,512,3.135,554,3.318,555,3.914,556,3.914,557,3.914,558,3.914,559,3.914]],["title/modules/UsersModule.html",[32,1.456,42,2.123]],["body/modules/UsersModule.html",[2,2.192,3,0.303,4,0.303,5,0.239,12,0.025,19,1.242,20,0.913,23,0.303,24,0.012,30,0.017,31,0.017,32,2.046,34,1.756,35,2.192,40,3.278,41,3.278,42,4.136,43,2.743,44,2.046,45,1.635,47,2.985,48,3.276,49,2.445,50,1.527,56,2.717,75,0.701,110,3.276,117,1.338,118,2.985,122,3.081,123,2.717,124,2.717,125,2.046,508,3.695,528,2.717,529,3.828,530,3.081,560,3.081,561,3.081,562,3.081,563,3.634,564,3.634,565,3.634]],["title/injectables/UsersService.html",[58,1.054,529,1.951]],["body/injectables/UsersService.html",[3,0.177,4,0.177,5,0.139,7,0.197,8,0.776,12,0.025,14,0.888,16,1.006,17,0.629,19,1.142,20,0.533,23,0.177,24,0.007,26,1.592,27,1.24,30,0.011,31,0.011,45,1.483,50,0.891,58,1.002,59,1.024,68,3.184,74,1.24,75,0.952,76,0.605,77,1.163,78,2.932,91,0.732,92,1.194,96,1.923,99,1.488,102,3.49,117,2.007,133,1.138,134,1.798,135,3.406,137,2.452,139,2.793,141,1.855,146,2.463,147,2.275,148,1.585,149,2.565,150,1.798,151,1.585,153,1.798,154,2.275,159,1.855,164,1.798,165,2.463,166,1.588,175,1.791,177,2.103,178,1.798,181,2.216,182,1.798,183,1.798,184,1.024,185,1.798,186,0.833,187,1.798,205,1.798,225,1.483,239,0.891,244,1.024,377,1.585,379,1.798,455,2.019,461,4.183,469,2.793,470,3.688,472,2.793,505,2.216,510,2.793,511,2.793,512,2.792,514,2.793,524,2.793,527,1.798,528,1.585,529,1.855,566,1.798,567,3.426,568,4.041,569,2.121,570,2.121,571,3.295,572,2.121,573,2.121,574,3.295,575,2.121,576,3.295,577,2.121,578,3.295,579,2.121,580,2.121,581,3.295,582,3.295,583,2.121,584,2.121,585,2.121,586,3.295,587,2.121,588,2.121,589,2.121,590,3.295,591,2.121,592,3.295,593,2.121,594,2.121,595,2.121,596,4.041,597,2.121,598,2.121]],["title/classes/ValidationError.html",[24,0.012,91,1.196]],["body/classes/ValidationError.html",[3,0.222,4,0.222,5,0.175,7,0.247,8,0.922,12,0.025,14,0.981,16,0.587,17,0.609,23,0.491,24,0.02,27,0.669,30,0.014,31,0.014,74,0.669,75,0.895,76,0.627,77,0.627,91,1.601,133,1.35,152,1.537,198,0.809,207,1.44,208,2.65,215,2.86,216,1.285,217,2.375,218,2.752,219,1.048,220,3.065,221,2.632,222,2.661,224,2.632,225,2.86,229,1.285,230,2.087,231,2.414,232,1.384,233,1.384,234,1.384,235,2.035,236,2.035,237,1.384,238,2.035,239,1.643,240,3.065,241,2.035,242,2.965,243,1.384,244,1.285,245,1.384,246,1.384,247,1.285,248,1.384,249,1.384,250,1.118,251,1.285,252,1.384,253,1.76,254,1.384,255,1.384,256,1.384,387,2.611,388,1.498,389,1.498,390,1.498,599,3.911,600,2.66]],["title/coverage.html",[601,3.998]],["body/coverage.html",[0,2.027,1,1.591,5,0.155,6,2.005,12,0.025,21,1.331,24,0.022,30,0.012,31,0.012,53,1.449,58,1.723,60,2.005,66,1.591,67,2.005,71,1.449,76,0.29,79,1.331,85,1.449,87,1.449,89,1.768,91,0.816,99,0.871,108,1.449,117,0.871,118,2.195,131,2.005,137,1.064,149,1.331,152,0.929,175,0.929,186,0.929,197,1.768,199,2.005,207,0.871,215,1.064,216,2.737,229,3.406,230,1.064,239,0.993,253,1.064,257,1.231,258,1.768,259,1.768,298,1.768,299,2.005,300,2.005,340,2.409,346,2.25,347,1.591,349,2.005,354,2.005,355,1.449,356,2.678,357,2.005,360,2.005,382,2.005,392,2.678,412,1.591,416,1.591,417,2.005,452,1.591,453,2.005,454,2.005,490,2.678,502,3.037,508,1.591,509,2.005,512,1.449,529,1.331,531,1.768,554,2.005,566,2.005,601,2.005,602,2.005,603,2.365,604,2.365,605,5.183,606,4.824,607,2.678,608,6.518,609,6.641,610,2.005,611,5.835,612,5.454,613,2.005,614,2.005,615,2.005,616,2.005,617,2.005,618,2.365,619,3.666,620,2.005,621,3.582,622,3.666,623,3.666,624,2.005,625,2.005,626,2.005,627,2.005,628,2.005,629,2.365,630,2.365]],["title/dependencies.html",[35,1.873,631,2.167]],["body/dependencies.html",[12,0.025,20,1.081,30,0.019,31,0.019,35,1.936,50,1.807,83,2.422,112,2.894,116,3.216,120,3.216,145,2.636,146,3.216,268,3.647,316,4.609,340,2.894,369,3.647,632,4.302,633,5.96,634,4.302,635,4.302,636,4.302,637,4.302,638,4.302,639,4.302,640,4.302,641,4.302,642,4.302,643,4.302,644,4.302,645,4.302,646,5.436,647,4.302,648,4.302,649,4.302,650,4.302,651,4.302,652,4.302,653,4.302,654,3.647,655,4.302,656,4.302]],["title/miscellaneous/enumerations.html",[657,1.401,658,3.53]],["body/miscellaneous/enumerations.html",[7,0.454,12,0.024,30,0.021,31,0.021,269,3.96,279,4.991,284,4.401,455,3.608,464,5.01,505,3.96,607,3.659,657,2.365,658,4.15,659,4.15,660,5.887]],["title/miscellaneous/functions.html",[657,1.401,661,3.53]],["body/miscellaneous/functions.html",[7,0.46,12,0.023,16,1.094,17,0.988,30,0.021,31,0.021,74,1.246,75,0.957,76,0.608,77,1.168,87,3.635,626,4.203,627,5.381,628,4.203,657,2.395,661,4.203,662,4.958,663,4.203,664,4.958,665,4.958]],["title/index.html",[7,0.269,666,2.9,667,2.9]],["body/index.html",[0,1.308,5,0.287,12,0.024,17,0.682,30,0.015,31,0.015,35,1.401,45,1.401,117,1.146,284,2.327,404,1.908,455,1.908,484,4.295,567,3.713,602,4.661,631,3.787,654,2.639,668,3.113,669,3.113,670,3.113,671,3.113,672,3.113,673,3.113,674,3.113,675,3.113,676,3.113,677,3.113,678,3.113,679,3.113,680,3.113,681,3.113,682,3.113,683,3.113,684,3.713,685,5.497,686,6.009,687,3.113,688,4.379,689,3.113,690,3.113,691,3.113,692,3.113,693,3.113,694,3.113,695,3.113,696,6.173,697,3.113,698,5.497,699,3.113,700,3.113,701,3.713,702,3.113,703,3.113,704,3.113,705,4.379,706,3.113,707,3.113,708,3.113,709,3.113,710,3.113,711,3.113,712,3.113,713,3.113,714,3.113,715,5.066,716,3.113,717,3.113,718,3.113,719,2.639,720,3.113,721,3.113,722,3.113,723,3.113,724,3.113,725,4.379,726,4.379,727,3.113,728,3.113,729,3.113,730,3.113,731,4.379,732,3.113,733,3.113,734,4.379,735,3.113,736,3.113,737,3.113,738,4.379,739,3.113,740,3.113,741,3.113,742,3.113,743,3.113,744,3.113,745,3.113,746,5.066,747,3.113,748,3.113,749,3.113,750,3.113,751,3.113,752,5.066,753,3.113,754,3.113,755,2.639,756,3.113,757,3.113,758,3.113,759,3.113,760,2.639,761,3.113,762,3.113]],["title/modules.html",[34,2.278]],["body/modules.html",[12,0.021,30,0.021,31,0.021,33,3.307,34,2.375,39,3.013,40,2.558,41,2.558,42,3.013,763,6.709,764,6.709,765,6.709,766,6.709]],["title/overview.html",[767,3.998]],["body/overview.html",[2,1.522,12,0.024,21,2.981,30,0.016,31,0.016,33,4.52,34,1.634,35,2.087,36,2.868,37,2.868,38,2.868,39,4.172,40,3.347,41,3.436,42,4.046,43,2.612,44,1.904,45,1.522,59,1.634,79,2.981,104,2.868,106,2.868,107,2.868,108,3.245,137,2.842,198,1.029,257,3.287,292,2.868,293,2.868,294,2.868,348,2.275,445,2.868,447,2.868,448,2.868,529,3.556,560,2.868,561,2.868,562,2.868,767,2.868,768,3.383,769,3.383,770,3.383,771,3.383,772,3.383]],["title/properties.html",[219,1.115,631,2.167]],["body/properties.html",[12,0.024,30,0.021,31,0.021,219,1.406,760,4.448,773,5.246,774,5.246,775,5.246,776,5.246,777,5.246]],["title/miscellaneous/typealiases.html",[657,1.401,778,4.164]],["body/miscellaneous/typealiases.html",[7,0.474,12,0.022,30,0.021,31,0.021,76,0.626,258,3.819,259,4.806,263,3.436,267,4.331,273,5.12,274,5.12,657,2.468,779,5.109,780,6.039]],["title/miscellaneous/variables.html",[657,1.401,781,3.53]],["body/miscellaneous/variables.html",[7,0.22,12,0.025,17,0.85,30,0.013,31,0.013,53,2.199,69,1.771,75,0.932,76,0.805,85,2.199,89,2.682,99,1.321,117,1.321,118,2.959,141,2.921,158,2.092,166,2.228,175,0.931,180,2.02,184,1.733,186,1.898,219,0.961,340,3.248,347,1.594,350,2.009,351,2.009,392,1.771,397,4.386,404,2.199,412,2.413,413,2.009,464,4.874,490,1.771,500,2.009,531,2.682,607,1.771,610,3.67,613,2.009,614,3.041,615,2.009,616,2.009,617,3.041,619,2.009,620,3.041,622,2.009,623,2.009,624,3.041,625,3.041,657,1.145,659,3.041,663,3.67,684,3.041,701,3.041,719,2.009,755,2.009,781,2.009,782,4.329,783,4.329,784,2.37,785,2.37,786,2.37,787,2.37,788,2.37,789,3.588,790,5.839,791,3.588,792,3.588,793,4.329,794,3.588,795,2.37,796,2.37,797,2.37,798,2.37,799,2.37,800,2.37,801,2.37,802,2.37,803,2.37,804,2.37,805,2.37,806,2.37,807,2.37,808,2.37,809,2.37,810,3.588,811,2.37,812,2.37,813,2.37,814,2.37,815,3.588,816,3.588,817,2.37,818,4.329,819,4.329,820,3.588]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":229,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["0.0.1",{"_index":774,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":415,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["10",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["13",{"_index":771,"title":{},"body":{"overview.html":{}}}],["16.0.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":772,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":769,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":251,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["401",{"_index":248,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["403",{"_index":245,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["404",{"_index":241,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["5",{"_index":768,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["5.4.4",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":231,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["7",{"_index":770,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["8.11.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{}}}],["_.get(err",{"_index":336,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_.get(token",{"_index":210,"title":{},"body":{"classes/Authorization.html":{}}}],["_.includes(user.roles",{"_index":276,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["_.intersection(roles",{"_index":212,"title":{},"body":{"classes/Authorization.html":{}}}],["_.omit(user.tojson",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["_id",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ability",{"_index":263,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(action.delete",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.read",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["ability.can(action.update",{"_index":443,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory",{"_index":297,"title":{},"body":{"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["ability.factory.ts",{"_index":259,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:20",{"_index":262,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":264,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":265,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["access",{"_index":247,"title":{},"body":{"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["access_token",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessed",{"_index":732,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":479,"title":{},"body":{"injectables/SessionService.html":{}}}],["accesstoken.save",{"_index":481,"title":{},"body":{"injectables/SessionService.html":{}}}],["account",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["action",{"_index":269,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["action.update",{"_index":283,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["adding",{"_index":752,"title":{},"body":{"index.html":{}}}],["additionalproperties",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv",{"_index":340,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ajv(ajvoptions",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(loginschema",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajv.compile(userschema",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ajvoptions",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":779,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allerrors",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedroles",{"_index":203,"title":{},"body":{"classes/Authorization.html":{}}}],["already",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["api",{"_index":685,"title":{},"body":{"index.html":{}}}],["api.git",{"_index":682,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":427,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get(':id",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@httpcode(httpstatus.no_content)@delete(':id",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@put('log",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":428,"title":{},"body":{"controllers/SessionController.html":{}}}],["apibody({schema",{"_index":421,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproperty",{"_index":383,"title":{},"body":{"classes/LoginDto.html":{},"classes/UsersDto.html":{}}}],["apiproperty({required",{"_index":558,"title":{},"body":{"classes/UsersDto.html":{}}}],["apitags",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["apitags(capitalizeinitials(routes.auth.name",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(capitalizeinitials(routes.session.name",{"_index":434,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(capitalizeinitials(routes.users.name",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":713,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appability",{"_index":274,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":676,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":308,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(err.errors",{"_index":341,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":684,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["auth.dto",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":431,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":357,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.strategy",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:18",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.strategy.ts:9",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.validation",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/jwt",{"_index":430,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":243,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["authguard",{"_index":358,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":760,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":197,"title":{"classes/Authorization.html":{}},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["authorize",{"_index":201,"title":{},"body":{"classes/Authorization.html":{}}}],["authorize(token",{"_index":202,"title":{},"body":{"classes/Authorization.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":725,"title":{},"body":{"index.html":{}}}],["await",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bad",{"_index":249,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["badrequestexception",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(validateuser.errors",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["baseerror",{"_index":215,"title":{"classes/BaseError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["baseerror:19",{"_index":390,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:2",{"_index":388,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["baseerror:3",{"_index":389,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["bcrypt",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync(userdto.password",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["below",{"_index":690,"title":{},"body":{"index.html":{}}}],["blocked",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["body.email",{"_index":440,"title":{},"body":{"controllers/SessionController.html":{}}}],["boolean",{"_index":394,"title":{},"body":{"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":766,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":763,"title":{},"body":{"modules.html":{}}}],["bson",{"_index":476,"title":{},"body":{"injectables/SessionService.html":{}}}],["build",{"_index":275,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["building",{"_index":671,"title":{},"body":{"index.html":{}}}],["can([action.read",{"_index":282,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.manage",{"_index":278,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["capitalizeinitials",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalizeinitials(str",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cases",{"_index":756,"title":{},"body":{"index.html":{}}}],["casl",{"_index":296,"title":{},"body":{"modules/CaslModule.html":{}}}],["casl/ability",{"_index":268,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl",{"_index":432,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["casl/casl.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["caslabilityfactory",{"_index":257,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":40,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":305,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cd",{"_index":683,"title":{},"body":{"index.html":{}}}],["check",{"_index":729,"title":{},"body":{"index.html":{}}}],["class",{"_index":24,"title":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["classes",{"_index":198,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"overview.html":{}}}],["clients",{"_index":741,"title":{},"body":{"index.html":{}}}],["clone",{"_index":679,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":292,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":293,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":294,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":445,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":448,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":446,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":447,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":560,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":562,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":563,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":561,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":220,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["common/constant",{"_index":270,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["common/errors",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["common/routes",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["common/types",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["comparepassword",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(user",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc/compodoc",{"_index":728,"title":{},"body":{"index.html":{}}}],["components/auth/auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["components/auth/auth.service",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["components/sessions/session.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["components/sessions/session.schema",{"_index":272,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["components/users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["components/users/users.schema",{"_index":271,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["condition",{"_index":472,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["condition._id",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["conditions",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.jwt_secret",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["const",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["constructor(code",{"_index":223,"title":{},"body":{"classes/BaseError.html":{}}}],["constructor(message",{"_index":240,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(sessionmodel",{"_index":457,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usermodel",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["controller(routes.auth.route",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(routes.session.route",{"_index":435,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(routes.users.route",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":601,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":455,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["create(@body",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(data",{"_index":460,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(userdto",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createforuser",{"_index":260,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":261,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["csrf",{"_index":748,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":317,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":320,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":319,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":730,"title":{},"body":{"index.html":{}}}],["currentenv",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":465,"title":{},"body":{"injectables/SessionService.html":{}}}],["date().toisostring",{"_index":331,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["debug",{"_index":717,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{}}}],["default",{"_index":397,"title":{},"body":{"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["delete",{"_index":505,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(@request",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(req",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(userid",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletemany",{"_index":456,"title":{},"body":{"injectables/SessionService.html":{}}}],["deletemany(userid",{"_index":466,"title":{},"body":{"injectables/SessionService.html":{}}}],["deleteresult",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":775,"title":{},"body":{"properties.html":{}}}],["details",{"_index":288,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detection#use",{"_index":286,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["detectsubjecttype",{"_index":289,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["dev_host=http://localhost:3000",{"_index":692,"title":{},"body":{"index.html":{}}}],["dev_mongo_uri=your_mongo_uri_replicaset",{"_index":693,"title":{},"body":{"index.html":{}}}],["dev_port=3000",{"_index":691,"title":{},"body":{"index.html":{}}}],["development",{"_index":701,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":393,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["documentation",{"_index":602,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["efficient",{"_index":672,"title":{},"body":{"index.html":{}}}],["eg",{"_index":742,"title":{},"body":{"index.html":{}}}],["elkomy",{"_index":762,"title":{},"body":{"index.html":{}}}],["elkomy/auth",{"_index":681,"title":{},"body":{"index.html":{}}}],["email",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":758,"title":{},"body":{"index.html":{}}}],["enhancements",{"_index":745,"title":{},"body":{"index.html":{}}}],["enum",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":658,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":689,"title":{},"body":{"index.html":{}}}],["envs",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envs[currentenv",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":313,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.errors",{"_index":343,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["err.status",{"_index":334,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error",{"_index":218,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors",{"_index":208,"title":{},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["errors.0.instancepath",{"_index":337,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors.0.message",{"_index":338,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["everything",{"_index":281,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["example",{"_index":436,"title":{},"body":{"controllers/SessionController.html":{}}}],["exception",{"_index":310,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":309,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:33",{"_index":312,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":327,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":326,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.status",{"_index":323,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["existing",{"_index":704,"title":{},"body":{"index.html":{}}}],["exists",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":316,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":217,"title":{},"body":{"classes/BaseError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/ValidationError.html":{}}}],["extractjwt",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":266,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":244,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["false",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":441,"title":{},"body":{"controllers/SessionController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"index.html":{}}}],["filterquery",{"_index":470,"title":{},"body":{"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["find",{"_index":759,"title":{},"body":{"index.html":{}}}],["findone",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["findone(condition",{"_index":469,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["format",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":670,"title":{},"body":{"index.html":{}}}],["full",{"_index":754,"title":{},"body":{"index.html":{}}}],["function",{"_index":502,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":661,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":726,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('health",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get(@request",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(req",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":666,"title":{"index.html":{}},"body":{}}],["git",{"_index":678,"title":{},"body":{"index.html":{}}}],["handle",{"_index":339,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hasaccess",{"_index":213,"title":{},"body":{"classes/Authorization.html":{}}}],["heading",{"_index":734,"title":{},"body":{"index.html":{}}}],["hello",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":747,"title":{},"body":{"index.html":{}}}],["host",{"_index":307,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{}}}],["host.switchtohttp",{"_index":318,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception",{"_index":306,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":298,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":285,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["https://github.com/sanaa",{"_index":680,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":314,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":324,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["iconfig",{"_index":347,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":322,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ignoreexpiration",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":255,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["implements",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":739,"title":{},"body":{"index.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":267,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["inherited",{"_index":387,"title":{},"body":{"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectconnection",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectmodel",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(session.name",{"_index":478,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmodel(user.name",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["insomnia",{"_index":743,"title":{},"body":{"index.html":{}}}],["installation",{"_index":677,"title":{},"body":{"index.html":{}}}],["installyou",{"_index":687,"title":{},"body":{"index.html":{}}}],["instancepath",{"_index":335,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["instead",{"_index":711,"title":{},"body":{"index.html":{}}}],["integrating",{"_index":746,"title":{},"body":{"index.html":{}}}],["interface",{"_index":346,"title":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":348,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"interfaces/SessionPayload.html":{},"overview.html":{}}}],["internal",{"_index":232,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["intersectedroles",{"_index":211,"title":{},"body":{"classes/Authorization.html":{}}}],["intersectedroles.length",{"_index":214,"title":{},"body":{"classes/Authorization.html":{}}}],["ispasswordmatching",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalid",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["item",{"_index":290,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":291,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":738,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expires_in",{"_index":350,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwt_expires_in=60dpre",{"_index":695,"title":{},"body":{"index.html":{}}}],["jwt_secret",{"_index":351,"title":{},"body":{"interfaces/IConfig.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret=your_secret",{"_index":694,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":355,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":149,"title":{"interfaces/JWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"interfaces/JWTPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":108,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["license",{"_index":776,"title":{},"body":{"properties.html":{}}}],["limiting",{"_index":751,"title":{},"body":{"index.html":{}}}],["literal",{"_index":420,"title":{},"body":{"controllers/SessionController.html":{}}}],["locally",{"_index":700,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["log",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger",{"_index":753,"title":{},"body":{"index.html":{}}}],["login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":71,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginschema",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logout(@request",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(req",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout(token",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["manage",{"_index":660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["match",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":225,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["metadata",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":254,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["methodnotimplementederror",{"_index":253,"title":{"classes/MethodNotImplementedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["miscellaneous",{"_index":657,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":757,"title":{},"body":{"index.html":{}}}],["mode",{"_index":715,"title":{},"body":{"index.html":{}}}],["model",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":709,"title":{},"body":{"index.html":{}}}],["mongo_replicasetrunning",{"_index":712,"title":{},"body":{"index.html":{}}}],["mongo_uri",{"_index":352,"title":{},"body":{"interfaces/IConfig.html":{}}}],["mongodb",{"_index":697,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mongoose.clientsession",{"_index":462,"title":{},"body":{"injectables/SessionService.html":{}}}],["mongoose.connection",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["mongoosemodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongo_uri",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nanoid",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["need",{"_index":688,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"dependencies.html":{}}}],["new",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":669,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":239,"title":{"classes/NotFoundError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["notfounderror(`user",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":686,"title":{},"body":{"index.html":{}}}],["null",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":224,"title":{},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["obj",{"_index":503,"title":{},"body":{"classes/User.html":{}}}],["obj.password",{"_index":506,"title":{},"body":{"classes/User.html":{}}}],["object",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(roles",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectid",{"_index":475,"title":{},"body":{"injectables/SessionService.html":{}}}],["objectid(userid",{"_index":486,"title":{},"body":{"injectables/SessionService.html":{}}}],["ok",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["one",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["openapi",{"_index":736,"title":{},"body":{"index.html":{}}}],["optional",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":710,"title":{},"body":{"index.html":{}}}],["overview",{"_index":767,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":631,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["param",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["parsevalidationerrors",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsevalidationerrors(err",{"_index":311,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["passport",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":328,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["pattern",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{}}}],["payload.details",{"_index":342,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.message",{"_index":344,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload.sessionid",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["port",{"_index":353,"title":{},"body":{"interfaces/IConfig.html":{}}}],["possibly",{"_index":735,"title":{},"body":{"index.html":{}}}],["post",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["postman",{"_index":744,"title":{},"body":{"index.html":{}}}],["private",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_expires_in",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":719,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":668,"title":{},"body":{"index.html":{}}}],["project",{"_index":731,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":399,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({select",{"_index":494,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":395,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":492,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":219,"title":{"properties.html":{}},"body":{"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"classes/ValidationError.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["protection",{"_index":749,"title":{},"body":{"index.html":{}}}],["provide",{"_index":703,"title":{},"body":{"index.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":425,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["put('log",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('revoke",{"_index":439,"title":{},"body":{"controllers/SessionController.html":{}}}],["rate",{"_index":750,"title":{},"body":{"index.html":{}}}],["read",{"_index":279,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ref",{"_index":403,"title":{},"body":{"classes/Session.html":{}}}],["reflect",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["regex.name",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex.password",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replica",{"_index":698,"title":{},"body":{"index.html":{}}}],["req",{"_index":424,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":250,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{}}}],["request.url",{"_index":329,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":404,"title":{},"body":{"classes/Session.html":{},"controllers/SessionController.html":{},"classes/UsersDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":315,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(payload",{"_index":333,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rest",{"_index":740,"title":{},"body":{"index.html":{}}}],["results",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{}}}],["revoked",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{}}}],["revokeuser",{"_index":418,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["revokeuser(email",{"_index":473,"title":{},"body":{"injectables/SessionService.html":{}}}],["revokeuser(req",{"_index":419,"title":{},"body":{"controllers/SessionController.html":{}}}],["rimraf",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["roles",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":277,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["roleslist",{"_index":610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":696,"title":{},"body":{"index.html":{}}}],["running",{"_index":733,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":721,"title":{},"body":{"index.html":{}}}],["sanaa",{"_index":761,"title":{},"body":{"index.html":{}}}],["saved",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":673,"title":{},"body":{"index.html":{}}}],["schema",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":407,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(session",{"_index":413,"title":{},"body":{"classes/Session.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":500,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":408,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.boolean",{"_index":411,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["schematypes.objectid",{"_index":410,"title":{},"body":{"classes/Session.html":{}}}],["script",{"_index":708,"title":{},"body":{"index.html":{}}}],["secret",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":499,"title":{},"body":{"classes/User.html":{}}}],["select('+password",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":674,"title":{},"body":{"index.html":{}}}],["session",{"_index":175,"title":{"classes/Session.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session._id",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.blocked",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.controller",{"_index":450,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.email",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.interface",{"_index":477,"title":{},"body":{"injectables/SessionService.html":{}}}],["session.name",{"_index":451,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.revoked",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session.roles",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.schema",{"_index":433,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session.service",{"_index":429,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessioncontroller",{"_index":416,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionid",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{}}}],["sessionmodel",{"_index":459,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionmodule",{"_index":41,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionpayload",{"_index":452,"title":{"interfaces/SessionPayload.html":{}},"body":{"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["sessions",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sessions/session.module",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["sessions/session.service",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["sessionschema",{"_index":412,"title":{},"body":{"classes/Session.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionschema.index",{"_index":414,"title":{},"body":{"classes/Session.html":{}}}],["sessionservice",{"_index":137,"title":{"injectables/SessionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":484,"title":{},"body":{"injectables/SessionService.html":{},"index.html":{}}}],["side",{"_index":675,"title":{},"body":{"index.html":{}}}],["small",{"_index":706,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{}}}],["specification",{"_index":737,"title":{},"body":{"index.html":{}}}],["src/.../auth.validation.ts",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constant.ts",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../regex.ts",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.schema.ts",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.schema.ts",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.validation.ts",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validator.ts",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["src/casl/casl",{"_index":258,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/casl/casl.module.ts",{"_index":295,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/common/authorization.ts",{"_index":199,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/common/authorization.ts:6",{"_index":204,"title":{},"body":{"classes/Authorization.html":{}}}],["src/common/constant.ts",{"_index":607,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors.ts",{"_index":216,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["src/common/errors.ts:19",{"_index":228,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:2",{"_index":227,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:28",{"_index":391,"title":{},"body":{"classes/NotFoundError.html":{}}}],["src/common/errors.ts:3",{"_index":226,"title":{},"body":{"classes/BaseError.html":{}}}],["src/common/errors.ts:34",{"_index":487,"title":{},"body":{"classes/UnauthenticatedError.html":{}}}],["src/common/errors.ts:40",{"_index":488,"title":{},"body":{"classes/UnauthorizedError.html":{}}}],["src/common/errors.ts:47",{"_index":599,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/common/errors.ts:54",{"_index":386,"title":{},"body":{"classes/MethodNotImplementedError.html":{}}}],["src/common/errors.ts:60",{"_index":489,"title":{},"body":{"classes/UnexpectedError.html":{}}}],["src/common/regex.ts",{"_index":613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/routes.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/types.ts",{"_index":354,"title":{},"body":{"interfaces/JWTPayload.html":{},"coverage.html":{}}}],["src/common/validator.ts",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/components/auth/auth.controller.ts:16",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/components/auth/auth.dto.ts",{"_index":382,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/components/auth/auth.dto.ts:5",{"_index":384,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.dto.ts:8",{"_index":385,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/components/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/components/auth/auth.service.ts",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/components/auth/auth.service.ts:14",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:21",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.service.ts:31",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/components/auth/auth.validation.ts",{"_index":619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/auth/jwt",{"_index":356,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts",{"_index":417,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/components/sessions/session.controller.ts:28",{"_index":423,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/components/sessions/session.interface.ts",{"_index":453,"title":{},"body":{"interfaces/SessionPayload.html":{},"coverage.html":{}}}],["src/components/sessions/session.module.ts",{"_index":449,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/components/sessions/session.schema.ts",{"_index":392,"title":{},"body":{"classes/Session.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/sessions/session.schema.ts:14",{"_index":405,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:17",{"_index":406,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:20",{"_index":400,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:23",{"_index":402,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:29",{"_index":401,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.schema.ts:35",{"_index":398,"title":{},"body":{"classes/Session.html":{}}}],["src/components/sessions/session.service.ts",{"_index":454,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/components/sessions/session.service.ts:11",{"_index":458,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:16",{"_index":463,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:24",{"_index":471,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:28",{"_index":474,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/sessions/session.service.ts:35",{"_index":467,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/components/users/users.controller.ts",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/components/users/users.controller.ts:37",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:49",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:61",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.controller.ts:75",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/components/users/users.dto.ts",{"_index":554,"title":{},"body":{"classes/UsersDto.html":{},"coverage.html":{}}}],["src/components/users/users.dto.ts:11",{"_index":556,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:14",{"_index":557,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:5",{"_index":559,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.dto.ts:8",{"_index":555,"title":{},"body":{"classes/UsersDto.html":{}}}],["src/components/users/users.module.ts",{"_index":564,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/components/users/users.schema.ts",{"_index":490,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/users/users.schema.ts:12",{"_index":493,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:15",{"_index":495,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:18",{"_index":496,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:24",{"_index":491,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.schema.ts:9",{"_index":497,"title":{},"body":{"classes/User.html":{}}}],["src/components/users/users.service.ts",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/components/users/users.service.ts:13",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:20",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:50",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:58",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.service.ts:62",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/components/users/users.validation.ts",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.interface.ts",{"_index":349,"title":{},"body":{"interfaces/IConfig.html":{},"coverage.html":{}}}],["src/config/index.ts",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/filters/http",{"_index":299,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/index.ts",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["staging",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start:debug",{"_index":718,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":716,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":720,"title":{},"body":{"index.html":{}}}],["started",{"_index":667,"title":{"index.html":{}},"body":{}}],["starting",{"_index":699,"title":{},"body":{"index.html":{}}}],["statements",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":200,"title":{},"body":{"classes/Authorization.html":{}}}],["status",{"_index":221,"title":{},"body":{"classes/BaseError.html":{},"classes/HttpExceptionFilter.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["statuscode",{"_index":325,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["step",{"_index":702,"title":{},"body":{"index.html":{}}}],["str",{"_index":665,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":287,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["subjects",{"_index":273,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(0",{"_index":242,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super(message",{"_index":234,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["super_admin",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":764,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":765,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":654,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["table",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":755,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:e2e",{"_index":724,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":437,"title":{},"body":{"controllers/SessionController.html":{}}}],["tests",{"_index":723,"title":{},"body":{"index.html":{}}}],["this.appservice.gethealth",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(req.user",{"_index":442,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["this.code",{"_index":235,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.comparepassword(user",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.connection.startsession",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.errors",{"_index":252,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.jwtservice.sign(payload",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.message",{"_index":238,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.name",{"_index":236,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.parsevalidationerrors(exception",{"_index":332,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.sessionmodel(data",{"_index":480,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.deletemany",{"_index":485,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.findone(condition",{"_index":482,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionmodel.updateone",{"_index":483,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.create",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.sessionservice.deletemany(userid",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sessionservice.findone",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.sessionservice.revokeuser(body.email",{"_index":444,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.revokeuser(token.email",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.status",{"_index":237,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["this.toobject",{"_index":504,"title":{},"body":{"classes/User.html":{}}}],["this.usermodel",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.deleteone(condition",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone(condition",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(userdto",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.delete(userid",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(conditions",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.logout(req.user",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":330,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["tojson",{"_index":222,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["token",{"_index":205,"title":{},"body":{"classes/Authorization.html":{},"injectables/UsersService.html":{}}}],["tools",{"_index":233,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["transaction",{"_index":461,"title":{},"body":{"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["transaction.endsession",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["transaction.withtransaction(async",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["true",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/Authorization.html":{},"injectables/JwtStrategy.html":{},"classes/Session.html":{},"injectables/SessionService.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":321,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Authorization.html":{},"classes/BaseError.html":{},"injectables/CaslAbilityFactory.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IConfig.html":{},"interfaces/JWTPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":778,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":209,"title":{},"body":{"classes/Authorization.html":{},"injectables/CaslAbilityFactory.html":{}}}],["ui",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["unauthenticatederror",{"_index":152,"title":{"classes/UnauthenticatedError.html":{}},"body":{"injectables/AuthService.html":{},"classes/BaseError.html":{},"injectables/JwtStrategy.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unauthenticatederror('password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthenticatederror('user",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorized",{"_index":246,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unauthorizederror",{"_index":207,"title":{"classes/UnauthorizedError.html":{}},"body":{"classes/Authorization.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["undefined",{"_index":396,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["undefined})@apibearerauth()@useguards(jwtauthguard)@put('revoke",{"_index":422,"title":{},"body":{"controllers/SessionController.html":{}}}],["unexpected",{"_index":256,"title":{},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{}}}],["unexpectederror",{"_index":230,"title":{"classes/UnexpectedError.html":{}},"body":{"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["unique",{"_index":498,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":722,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":468,"title":{},"body":{"injectables/SessionService.html":{}}}],["unlicensed",{"_index":777,"title":{},"body":{"properties.html":{}}}],["update",{"_index":284,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["updatedresult",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedresult.modifiedcount",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":705,"title":{},"body":{"index.html":{}}}],["usedefaults",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":426,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":438,"title":{},"body":{"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":117,"title":{"classes/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Session.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.blocked",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"classes/Session.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userdto",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"classes/Session.html":{},"interfaces/SessionPayload.html":{},"classes/User.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.controller",{"_index":565,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.schema",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.validation",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.schema",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Session.html":{}}}],["userschema",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.index",{"_index":507,"title":{},"body":{"classes/User.html":{}}}],["userschema.methods.tojson",{"_index":501,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":508,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdto",{"_index":512,"title":{"classes/UsersDto.html":{}},"body":{"controllers/UsersController.html":{},"classes/UsersDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userservice",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":529,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":727,"title":{},"body":{"index.html":{}}}],["utility",{"_index":707,"title":{},"body":{"index.html":{}}}],["utils",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatelogin",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validatelogin(logindto",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["validatelogin.errors",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateuser",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validateuser(userdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["validation",{"_index":345,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerror",{"_index":91,"title":{"classes/ValidationError.html":{}},"body":{"controllers/AuthController.html":{},"classes/BaseError.html":{},"classes/MethodNotImplementedError.html":{},"classes/NotFoundError.html":{},"controllers/SessionController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnexpectedError.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationError.html":{},"coverage.html":{}}}],["validationerror(null",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{}}}],["value",{"_index":464,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":781,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":773,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":409,"title":{},"body":{"classes/Session.html":{},"classes/User.html":{}}}],["void",{"_index":206,"title":{},"body":{"classes/Authorization.html":{},"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":714,"title":{},"body":{"index.html":{}}}],["world",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":280,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["yes",{"_index":600,"title":{},"body":{"classes/ValidationError.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z][^&<>*:\"~$%]{1,49",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  getHealth(): string {\n    return this.appService.getHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './components/users/users.module';\nimport { config } from './config';\nimport { AuthModule } from './components/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { SessionModule } from './components/sessions/session.module';\nimport { CaslModule } from './casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(config.mongo_uri),\n    UsersModule,\n    AuthModule,\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealth\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealth\n                        \n                    \n                \n            \n            \n                \ngetHealth()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  getHealth(): string {\n    return 'OK';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Body } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LoginDto } from './auth.dto';\nimport { ROUTES } from '../../common/routes';\nimport { capitalizeInitials } from '../../utils';\nimport { validateLogin } from './auth.validation';\nimport { ValidationError } from '../../common/errors';\n\n@ApiTags(capitalizeInitials(ROUTES.auth.name))\n@Controller(ROUTES.auth.route)\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  async login(@Body() loginDto: LoginDto): Promise {\n    const isValid = validateLogin(loginDto);\n    if (!isValid) {\n      new ValidationError(null, validateLogin.errors);\n    }\n    return await this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSessionModule\n\nSessionModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from '../../components/auth/auth.controller';\nimport { AuthService } from '../../components/auth/auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { config } from '../../config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/users.schema';\nimport { JwtStrategy } from './jwt-auth.strategy';\nimport { SessionModule } from '../sessions/session.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: config.jwt_secret,\n    }),\n    SessionModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(user: User, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './auth.dto';\nimport * as bcrypt from 'bcrypt';\nimport { Model } from 'mongoose';\nimport { User } from '../users/users.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { JWTPayload } from '../../common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from '../../common/errors';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private jwtService: JwtService,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async comparePassword(user: User, password: string): Promise {\n    if (user) {\n      const isPasswordMatching = await bcrypt.compare(password, user.password);\n      if (isPasswordMatching) {\n        return true;\n      }\n    }\n    throw new UnauthenticatedError('Password do not match the saved one');\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const user = await this.userModel\n      .findOne({ email: loginDto.email })\n      .select('+password');\n\n    await this.comparePassword(user, loginDto.password);\n\n    if (user && user.blocked) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    let session = await this.sessionService.findOne({\n      userId: user._id,\n      revoked: false,\n    });\n\n    if (session == null) {\n      session = await this.sessionService.create({\n        userId: user._id,\n        email: user.email,\n        userName: user.username,\n        roles: user.roles,\n      });\n    }\n\n    const payload: JWTPayload = {\n      userId: session._id,\n      sessionId: session._id,\n      email: session.email,\n      username: session.username,\n      roles: session.roles,\n    };\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: _.omit(user.toJSON(), ['password']),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/authorization.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                authorize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                    \n                    authorize(token: JWTPayload, allowedRoles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/common/authorization.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allowedRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport { UnauthorizedError } from './errors';\nimport { JWTPayload } from './types';\n\nexport class Authorization {\n  static authorize(token: JWTPayload, allowedRoles: string[]) {\n    const roles = _.get(token, 'roles', []);\n    const intersectedRoles = _.intersection(roles, allowedRoles);\n    const hasAccess = intersectedRoles.length ? true : false;\n    if (hasAccess === false) {\n      throw new UnauthorizedError();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseError.html":{"url":"classes/BaseError.html","title":"class - BaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(code: number, name: string, status: number, message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in src/common/errors.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/casl/casl-ability.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl-ability.factory.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\nimport { Action, Roles } from '../common/constant';\nimport { User } from '../components/users/users.schema';\nimport { Session } from '../components/sessions/session.schema';\n\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, build } = new AbilityBuilder>(\n      Ability as AbilityClass,\n    );\n\n    if (_.includes(user.roles, Roles.ADMIN)) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can([Action.Read, Action.Update], User); // read-update access to everything\n    }\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                parseValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseValidationErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseValidationErrors(err: any, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as _ from 'lodash';\nimport {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    //@ts-ignore\n    const status = exception.status || HttpStatus.INTERNAL_SERVER_ERROR;\n    const payload = {\n      statusCode: status,\n      name: exception.name,\n      message: exception.message || 'Error',\n      path: request.url,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.parseValidationErrors(exception, payload);\n\n    response.status(status).json(payload);\n  }\n\n  private parseValidationErrors(err: any, payload: any) {\n    if (err.status && err.status === 400) {\n      const instancePath = _.get(err, 'errors.0.instancePath');\n      const message = _.get(err, 'errors.0.message');\n      // Handle ajv errors\n      if (Array.isArray(err.errors)) {\n        payload.details = err.errors;\n        payload.message = `Validation error: \"${instancePath}\" ${message}`;\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            jwt_expires_in\n                                        \n                                \n                                \n                                        \n                                            jwt_secret\n                                        \n                                \n                                \n                                        \n                                            mongo_uri\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_expires_in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_expires_in:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt_secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mongo_uri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongo_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  port: number;\n  host: string;\n  mongo_uri: string;\n  jwt_secret: string;\n  jwt_expires_in: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTPayload {\n  userId: string;\n  sessionId: string;\n  email: string;\n  username: string;\n  roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/jwt-auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/auth/jwt-auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/components/auth/jwt-auth.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { config } from '../../config';\nimport { SessionService } from '../sessions/session.service';\nimport { UnauthenticatedError } from '../../common/errors';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private sessionService: SessionService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: config.jwt_secret,\n    });\n  }\n\n  async validate(payload: Record): Promise {\n    const session = await this.sessionService.findOne({\n      _id: payload.sessionId,\n    });\n\n    if (session == null) {\n      throw new UnauthenticatedError('User session is not found');\n    }\n\n    if (session.revoked === true) {\n      throw new UnauthenticatedError('User session is revoked');\n    }\n\n    if (session.blocked === true) {\n      throw new UnauthenticatedError('User account is blocked');\n    }\n\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/auth/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodNotImplementedError.html":{"url":"classes/MethodNotImplementedError.html","title":"class - MethodNotImplementedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodNotImplementedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Session.html":{"url":"classes/Session.html","title":"class - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                revoked\n                            \n                            \n                                roles\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revoked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/sessions/session.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\nimport { User } from '../users/users.schema';\n\n@Schema({\n  versionKey: false,\n})\nexport class Session extends Document {\n  @Prop({\n    type: SchemaTypes.ObjectId,\n    ref: User.name,\n    required: true,\n  })\n  userId: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  revoked: boolean;\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const SessionSchema = SchemaFactory.createForClass(Session);\n\nSessionSchema.index({ userId: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(req, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({schema: undefined})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('revoke')\n                \n            \n\n            \n                \n                    Defined in src/components/sessions/session.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Put, Request, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { ROUTES } from '../../common/routes';\nimport { capitalizeInitials } from '../../utils';\nimport { UnauthorizedError, ValidationError } from '../../common/errors';\nimport { SessionService } from './session.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslAbilityFactory } from '../../casl/casl-ability.factory';\nimport { Action } from '../../common/constant';\nimport { Session } from './session.schema';\n\n@ApiTags(capitalizeInitials(ROUTES.session.name))\n@Controller(ROUTES.session.route)\nexport class SessionController {\n  constructor(\n    private readonly sessionService: SessionService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @ApiBody({\n    schema: {\n      example: { email: 'test@gmail.com' },\n    },\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('revoke')\n  async revokeUser(\n    @Request() req,\n    @Body() body: { email: string },\n  ): Promise {\n    if (!body.email) {\n      new ValidationError(null, `Email field is required`);\n    }\n\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, Session)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.sessionService.revokeUser(body.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/sessions/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CaslModule } from '../../casl/casl.module';\nimport { SessionController } from './session.controller';\nimport { Session, SessionSchema } from './session.schema';\nimport { SessionService } from './session.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Session.name, schema: SessionSchema }]),\n    CaslModule,\n  ],\n  controllers: [SessionController],\n  providers: [SessionService],\n  exports: [SessionService],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionPayload.html":{"url":"interfaces/SessionPayload.html","title":"interface - SessionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SessionPayload {\n  userId: string;\n  userName: string;\n  email: string;\n  roles: string[];\n  revoked?: boolean;\n  blocked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/sessions/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                revokeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/components/sessions/session.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: SessionPayload, transaction: mongoose.ClientSession | null)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SessionPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(userId: string, transaction: mongoose.ClientSession)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transaction\n                                    \n                                                mongoose.ClientSession\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        revokeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    revokeUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/sessions/session.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ObjectId } from 'bson';\nimport * as mongoose from 'mongoose';\n\nimport { Model, FilterQuery } from 'mongoose';\nimport { SessionPayload } from './session.interface';\nimport { Session } from './session.schema';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    @InjectModel(Session.name) private sessionModel: Model,\n  ) {}\n\n  async create(\n    data: SessionPayload,\n    transaction: mongoose.ClientSession | null = null,\n  ): Promise {\n    const accessToken = new this.sessionModel(data);\n    return accessToken.save({ session: transaction });\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.sessionModel.findOne(condition);\n  }\n\n  async revokeUser(email: string): Promise {\n    return this.sessionModel.updateOne(\n      { email, revoked: false },\n      { $set: { revoked: true } },\n    );\n  }\n\n  async deleteMany(userId: string, transaction: mongoose.ClientSession) {\n    return this.sessionModel.deleteMany(\n      {\n        userId: new ObjectId(userId),\n      },\n      { session: transaction },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthenticatedError.html":{"url":"classes/UnauthenticatedError.html","title":"class - UnauthenticatedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthenticatedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedError.html":{"url":"classes/UnexpectedError.html","title":"class - UnexpectedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blocked\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blocked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, SchemaTypes } from 'mongoose';\n\n@Schema({\n  versionKey: false,\n})\nexport class User extends Document {\n  @Prop()\n  username: string;\n\n  @Prop({ unique: true })\n  email: string;\n\n  @Prop({ select: false })\n  password: string;\n\n  @Prop()\n  roles: string[];\n\n  @Prop({\n    type: SchemaTypes.Boolean,\n    default: false,\n  })\n  blocked: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.methods.toJSON = function () {\n  const obj = this.toObject();\n  delete obj.password;\n  return obj;\n};\n\nUserSchema.index({ email: 1 });\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put('log-out')\n                \n            \n\n            \n                \n                    Defined in src/components/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { FilterQuery } from 'mongoose';\nimport { CaslAbilityFactory } from '../../casl/casl-ability.factory';\nimport { Action } from '../../common/constant';\nimport { UnauthorizedError, ValidationError } from '../../common/errors';\nimport { ROUTES } from '../../common/routes';\nimport { capitalizeInitials } from '../../utils';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\nimport { UsersService } from './users.service';\nimport { validateUser } from './users.validation';\n\n@ApiTags(capitalizeInitials(ROUTES.users.name))\n@Controller(ROUTES.users.route)\nexport class UsersController {\n  constructor(\n    private readonly userService: UsersService,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  @Post()\n  async create(@Body() userDto: UsersDto): Promise {\n    const isValid = validateUser(userDto);\n    if (!isValid) {\n      throw new BadRequestException(validateUser.errors);\n    }\n\n    return await this.userService.create(userDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Put('log-out')\n  async logOut(@Request() req: any): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Update, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.logOut(req.user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async get(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Read, User)) {\n      throw new UnauthorizedError();\n    }\n\n    const conditions: FilterQuery = { _id: userId };\n    return await this.userService.findOne(conditions);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') userId: string): Promise {\n    const ability = this.caslAbilityFactory.createForUser(req.user);\n    if (!ability.can(Action.Delete, User)) {\n      throw new UnauthorizedError();\n    }\n\n    return await this.userService.delete(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersDto.html":{"url":"classes/UsersDto.html","title":"class - UsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                roles\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/users/users.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UsersDto {\n  @ApiProperty({ required: true })\n  readonly username: string;\n\n  @ApiProperty()\n  readonly email: string;\n\n  @ApiProperty()\n  readonly password: string;\n\n  @ApiProperty()\n  readonly roles: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/components/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './users.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { SessionModule } from '../sessions/session.module';\nimport { CaslModule } from '../../casl/casl.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    SessionModule,\n    CaslModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                logOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, connection: mongoose.Connection, sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/components/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    mongoose.Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(condition: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                                FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(token: JWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/components/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\nimport * as mongoose from 'mongoose';\nimport { FilterQuery, Model } from 'mongoose';\nimport { NotFoundError, ValidationError } from '../../common/errors';\nimport { JWTPayload } from '../../common/types';\nimport { SessionService } from '../sessions/session.service';\nimport { UsersDto } from './users.dto';\nimport { User } from './users.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @InjectConnection() private readonly connection: mongoose.Connection,\n    private readonly sessionService: SessionService,\n  ) {}\n\n  async create(userDto: UsersDto): Promise {\n    let user = await this.userModel.findOne({ email: userDto.email });\n\n    if (user) {\n      throw new BadRequestException(\n        `user with email ${userDto.email} already exists`,\n      );\n    }\n\n    let session = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      const password = bcrypt.hashSync(userDto.password, 10);\n      user = new this.userModel({ ...userDto, password });\n      await user.save({ session: transaction });\n      session = await this.sessionService.create(\n        {\n          userId: user._id,\n          email: user.email,\n          userName: user.username,\n          roles: user.roles,\n        },\n        transaction,\n      );\n    });\n\n    await transaction.endSession();\n    return session;\n  }\n\n  async logOut(token: JWTPayload): Promise {\n    const updatedResult = await this.sessionService.revokeUser(token.email);\n    if (updatedResult.modifiedCount) {\n      return { message: 'log-out successful' };\n    }\n    return { message: 'log-out failed' };\n  }\n\n  async findOne(condition: FilterQuery): Promise {\n    return this.userModel.findOne(condition);\n  }\n\n  async delete(userId: string): Promise {\n    const condition: FilterQuery = { _id: userId };\n    const user = await this.userModel.findOne(condition);\n\n    if (!user) {\n      throw new NotFoundError(`user with id ${condition._id} is not found`);\n    }\n\n    let deleteResult = null;\n    const transaction = await this.connection.startSession();\n    await transaction.withTransaction(async () => {\n      deleteResult = await this.userModel.deleteOne(condition);\n      await this.sessionService.deleteMany(userId, transaction);\n    });\n    await transaction.endSession();\n\n    return deleteResult;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errors\n                            \n                            \n                                code\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, errors?: any)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/common/errors.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:2\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseError\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseError:3\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseError\n\n                \n            \n            \n                \n                        Defined in         BaseError:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { code: number; error: any; message: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class BaseError extends Error {\n  code: number;\n  status: number;\n\n  constructor(\n    code = 0,\n    name = 'UnexpectedError',\n    status = 500,\n    message = 'Internal tools error',\n  ) {\n    super(message);\n\n    this.code = code;\n    this.name = name;\n    this.status = status;\n    this.message = message;\n  }\n\n  toJson() {\n    return {\n      code: this.code,\n      error: this.name,\n      message: this.message,\n    };\n  }\n}\n\nexport class NotFoundError extends BaseError {\n  constructor(message = 'Error 404') {\n    super(0, 'NotFoundError', 404, message);\n  }\n}\n\nexport class UnauthenticatedError extends BaseError {\n  constructor(message = 'Authentication failed') {\n    super(0, 'UnauthenticatedError', 403, message);\n  }\n}\n\nexport class UnauthorizedError extends BaseError {\n  constructor(message = 'Unauthorized Access') {\n    super(0, 'UnauthorizedError', 401, message);\n  }\n}\n\nexport class ValidationError extends BaseError {\n  errors: any;\n  constructor(message = 'Bad Request', errors?: any) {\n    super(0, 'ValidationError', 400, message);\n    this.errors = errors;\n  }\n}\n\nexport class MethodNotImplementedError extends BaseError {\n  constructor(message = 'Method Not Implemented') {\n    super(0, 'MethodNotImplementedError', 500, message);\n  }\n}\n\nexport class UnexpectedError extends BaseError {\n  constructor(message = 'Unexpected Error') {\n    super(0, 'UnexpectedError', 500, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/casl/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/authorization.ts\n            \n            class\n            Authorization\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constant.ts\n            \n            variable\n            RolesList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            BaseError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            MethodNotImplementedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthenticatedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            UnexpectedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            ValidationError\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/regex.ts\n            \n            variable\n            regex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/routes.ts\n            \n            variable\n            ROUTES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/types.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/validator.ts\n            \n            variable\n            AjvOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/auth/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            LoginSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/auth.validation.ts\n            \n            variable\n            validateLogin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/auth/jwt-auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/components/sessions/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/components/sessions/session.interface.ts\n            \n            interface\n            SessionPayload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            class\n            Session\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/sessions/session.schema.ts\n            \n            variable\n            SessionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/sessions/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.dto.ts\n            \n            class\n            UsersDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            ajv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/users/users.validation.ts\n            \n            variable\n            validateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.interface.ts\n            \n            interface\n            IConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            currentEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            envs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/index.ts\n            \n            function\n            capitalizeInitials\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.4\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mongoose : ^9.1.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            ajv : ^8.11.0\n        \n            bcrypt : ^5.0.1\n        \n            dotenv : ^16.0.1\n        \n            lodash : ^4.17.21\n        \n            nanoid : ^4.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constant.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            capitalizeInitials   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalizeInitials\n                        \n                    \n                \n            \n            \n                \ncapitalizeInitials(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nInstallation\n$ git clone https://github.com/Sanaa-Elkomy/auth-api.git\n$ cd auth-api\n$ npm installYou need create an .env file like below\nDEV_PORT=3000\nDEV_HOST=http://localhost:3000\nDEV_MONGO_URI=Your_Mongo_Uri_ReplicaSet\nJWT_SECRET=Your_Secret\nJWT_EXPIRES_IN=60dPre-Run Dependencies\n# You need a MongoDB replica set, and starting a replica set locally for development is a required step, either provide an existing replica connection string or use a small utility script to run a mongo replica set and use the output connection string instead\n\n$ npm run mongo_replicasetRunning the app\n# development watch mode\n$ npm run start:dev\n\n# debug mode\n$ npm run start:debug\n\n# production mode\n$ npm run start:prodTest\n# sample unit tests for user controller\n$ npm run test:e2e\nDocumentation\n\nDocumentation is automatically generated using @compodoc/compodoc,\nCheck out current project documentation on /auth-api.\n\n\nA Swagger documentation is also automatically generated and can be accessed by running the project and heading to /api\nand possibly the openapi specification json file that can be imported in rest clients (eg,. insomnia, postman) by heading to /api-json\n\nEnhancements\n\nIntegrating with Helmet Package\nIntegrating with CSRF Protection Package\nIntegrating with Rate Limiting Package\nAdding Logger\nAdding Full Test Cases\nAdding missing Endpoints (find, update)\n\nAuthor\n\n@Sanaa-Elkomy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nCaslModule->SessionModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCaslModule->UsersModule\n\n\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nUsersModule -->\n\nSessionModule->UsersModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Subjects   (src/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/casl/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ajv   (src/.../auth.validation.ts)\n                        \n                        \n                            ajv   (src/.../users.validation.ts)\n                        \n                        \n                            AjvOptions   (src/.../validator.ts)\n                        \n                        \n                            config   (src/.../index.ts)\n                        \n                        \n                            currentEnv   (src/.../index.ts)\n                        \n                        \n                            envs   (src/.../index.ts)\n                        \n                        \n                            LoginSchema   (src/.../auth.validation.ts)\n                        \n                        \n                            regex   (src/.../regex.ts)\n                        \n                        \n                            Roles   (src/.../constant.ts)\n                        \n                        \n                            RolesList   (src/.../constant.ts)\n                        \n                        \n                            ROUTES   (src/.../routes.ts)\n                        \n                        \n                            SessionSchema   (src/.../session.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../users.validation.ts)\n                        \n                        \n                            validateLogin   (src/.../auth.validation.ts)\n                        \n                        \n                            validateUser   (src/.../users.validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/components/auth/auth.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n  },\n  required: ['email', 'password'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateLogin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(LoginSchema)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.validation.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Ajv(AjvOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    username: { type: 'string', pattern: regex.name },\n    email: { type: 'string', format: 'email' },\n    password: { type: 'string', pattern: regex.password },\n    roles: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: RolesList,\n      },\n    },\n  },\n  required: ['username', 'email', 'password', 'roles'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ajv.compile(UserSchema)\n                    \n                \n\n\n        \n    \n\n    src/common/validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AjvOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n  allErrors: true,\n  useDefaults: true,\n  formats: { email: true },\n}\n                    \n                \n\n\n        \n    \n\n    src/config/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...envs[currentEnv],\n  jwt_secret: process.env.JWT_SECRET,\n  jwt_expires_in: process.env.JWT_EXPIRES_IN,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentEnv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV || 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        envs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  development,\n  test,\n  staging,\n  production,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/regex.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        regex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  name: '^[a-zA-Z][^&<>*:\"~$%]{1,49}$',\n  password:\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n}\n                    \n                \n\n\n        \n    \n\n    src/common/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUPER_ADMIN: 'super_admin',\n  ADMIN: 'admin',\n  USER: 'user',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RolesList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(Roles)\n                    \n                \n\n\n        \n    \n\n    src/common/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROUTES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  users: {\n    route: 'users',\n    name: 'users',\n  },\n  auth: {\n    route: 'login',\n    name: 'auth',\n  },\n  session: {\n    route: 'sessions',\n    name: 'sessions',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/components/sessions/session.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Session)\n                    \n                \n\n\n        \n    \n\n    src/components/users/users.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
